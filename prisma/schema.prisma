// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  SUPER_ADMIN
  THEATHER_ADMIN
  ADMIN
}

enum TicketStatus {
  PENDING
  CONFIRMED
  USED
  CANCELED
}

model Admin {
  adminId   String      @id @default(uuid())
  username  String      @unique
  password  String
  role      AdminRole   
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  theater   Theaters[]
}

model User {
  userId    String      @id @default(uuid())
  email     String      @unique
  password  String
  name      String
  // theaters  Theaters[]
  // seats     Seats[]
  tickets   Tickets[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Theaters {
  theatherId        String      @id @default(uuid())
  name              String
  location          String
  capacity          Int
  movies            MovieTheater[]
  movieSchedule     MovieSchedules[]
  // users             User[]
  seats             Seats[]
  adminID           String?
  admin             Admin?       @relation(fields: [adminID], references: [adminId])
}

model Seats {
  seatId        String      @id @default(uuid())
  seatNumber    String
  seatType      String
  theaterID     String
  theater       Theaters    @relation(fields: [theaterID], references: [theatherId])
  // users         User[]
  tickets       Tickets[]
}

model Movies {
  movieId           String           @id @default(uuid())
  title             String
  description       String
  duration          Int
  releaseDate       DateTime
  schedules         MovieSchedules[]
  theaters          MovieTheater[]
}

model MovieTheater {
  id        String  @id @default(uuid())
  movieId   String
  theaterId String
  movie     Movies  @relation(fields: [movieId], references: [movieId])
  theater   Theaters @relation(fields: [theaterId], references: [theatherId])
// Hindari duplikasi data
  @@unique([movieId, theaterId]) 
}


model MovieSchedules {
  scheduleId        String      @id @default(uuid())
  startTime         DateTime
  endTime           DateTime
  movieID           String
  movie             Movies      @relation(fields: [movieID], references: [movieId])
  theaterID         String
  theater           Theaters    @relation(fields: [theaterID], references: [theatherId])
  tickets           Tickets[]
}

model Tickets {
  ticketId           String         @id @default(uuid())
  ticketNumber       String         @unique
  price              Decimal  
  status             TicketStatus   @default(PENDING)
  scheduleID         String
  schedule           MovieSchedules @relation(fields: [scheduleID], references: [scheduleId])
  userID             String
  user               User           @relation(fields: [userID], references: [userId])
  stripe             Stripe         @relation(fields: [stripeID], references: [stripeId])
  stripeID           String         @unique
  seatID             String?
  seat               Seats?          @relation(fields: [seatID], references: [seatId])
}

model Stripe {
  stripeId           String       @id @default(uuid())
  customerID         String       @unique
  paymentMethodID    String       @unique
  tickets            Tickets[]
}