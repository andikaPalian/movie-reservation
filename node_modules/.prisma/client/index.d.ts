
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Theaters
 * 
 */
export type Theaters = $Result.DefaultSelection<Prisma.$TheatersPayload>
/**
 * Model Seats
 * 
 */
export type Seats = $Result.DefaultSelection<Prisma.$SeatsPayload>
/**
 * Model Movies
 * 
 */
export type Movies = $Result.DefaultSelection<Prisma.$MoviesPayload>
/**
 * Model MovieSchedules
 * 
 */
export type MovieSchedules = $Result.DefaultSelection<Prisma.$MovieSchedulesPayload>
/**
 * Model Tickets
 * 
 */
export type Tickets = $Result.DefaultSelection<Prisma.$TicketsPayload>
/**
 * Model Stripe
 * 
 */
export type Stripe = $Result.DefaultSelection<Prisma.$StripePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AdminRole: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  THEATHER_ADMIN: 'THEATHER_ADMIN'
};

export type AdminRole = (typeof AdminRole)[keyof typeof AdminRole]

}

export type AdminRole = $Enums.AdminRole

export const AdminRole: typeof $Enums.AdminRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theaters`: Exposes CRUD operations for the **Theaters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Theaters
    * const theaters = await prisma.theaters.findMany()
    * ```
    */
  get theaters(): Prisma.TheatersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.seats`: Exposes CRUD operations for the **Seats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seats
    * const seats = await prisma.seats.findMany()
    * ```
    */
  get seats(): Prisma.SeatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.movies`: Exposes CRUD operations for the **Movies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movies.findMany()
    * ```
    */
  get movies(): Prisma.MoviesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.movieSchedules`: Exposes CRUD operations for the **MovieSchedules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovieSchedules
    * const movieSchedules = await prisma.movieSchedules.findMany()
    * ```
    */
  get movieSchedules(): Prisma.MovieSchedulesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **Tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.TicketsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stripe`: Exposes CRUD operations for the **Stripe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stripes
    * const stripes = await prisma.stripe.findMany()
    * ```
    */
  get stripe(): Prisma.StripeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    User: 'User',
    Theaters: 'Theaters',
    Seats: 'Seats',
    Movies: 'Movies',
    MovieSchedules: 'MovieSchedules',
    Tickets: 'Tickets',
    Stripe: 'Stripe'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "admin" | "user" | "theaters" | "seats" | "movies" | "movieSchedules" | "tickets" | "stripe"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Theaters: {
        payload: Prisma.$TheatersPayload<ExtArgs>
        fields: Prisma.TheatersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TheatersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TheatersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>
          }
          findFirst: {
            args: Prisma.TheatersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TheatersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>
          }
          findMany: {
            args: Prisma.TheatersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>[]
          }
          create: {
            args: Prisma.TheatersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>
          }
          createMany: {
            args: Prisma.TheatersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TheatersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>[]
          }
          delete: {
            args: Prisma.TheatersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>
          }
          update: {
            args: Prisma.TheatersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>
          }
          deleteMany: {
            args: Prisma.TheatersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TheatersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TheatersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>[]
          }
          upsert: {
            args: Prisma.TheatersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheatersPayload>
          }
          aggregate: {
            args: Prisma.TheatersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheaters>
          }
          groupBy: {
            args: Prisma.TheatersGroupByArgs<ExtArgs>
            result: $Utils.Optional<TheatersGroupByOutputType>[]
          }
          count: {
            args: Prisma.TheatersCountArgs<ExtArgs>
            result: $Utils.Optional<TheatersCountAggregateOutputType> | number
          }
        }
      }
      Seats: {
        payload: Prisma.$SeatsPayload<ExtArgs>
        fields: Prisma.SeatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>
          }
          findFirst: {
            args: Prisma.SeatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>
          }
          findMany: {
            args: Prisma.SeatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>[]
          }
          create: {
            args: Prisma.SeatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>
          }
          createMany: {
            args: Prisma.SeatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>[]
          }
          delete: {
            args: Prisma.SeatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>
          }
          update: {
            args: Prisma.SeatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>
          }
          deleteMany: {
            args: Prisma.SeatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SeatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>[]
          }
          upsert: {
            args: Prisma.SeatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsPayload>
          }
          aggregate: {
            args: Prisma.SeatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeats>
          }
          groupBy: {
            args: Prisma.SeatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeatsCountArgs<ExtArgs>
            result: $Utils.Optional<SeatsCountAggregateOutputType> | number
          }
        }
      }
      Movies: {
        payload: Prisma.$MoviesPayload<ExtArgs>
        fields: Prisma.MoviesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MoviesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MoviesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          findFirst: {
            args: Prisma.MoviesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MoviesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          findMany: {
            args: Prisma.MoviesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>[]
          }
          create: {
            args: Prisma.MoviesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          createMany: {
            args: Prisma.MoviesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MoviesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>[]
          }
          delete: {
            args: Prisma.MoviesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          update: {
            args: Prisma.MoviesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          deleteMany: {
            args: Prisma.MoviesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MoviesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MoviesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>[]
          }
          upsert: {
            args: Prisma.MoviesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          aggregate: {
            args: Prisma.MoviesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovies>
          }
          groupBy: {
            args: Prisma.MoviesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MoviesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MoviesCountArgs<ExtArgs>
            result: $Utils.Optional<MoviesCountAggregateOutputType> | number
          }
        }
      }
      MovieSchedules: {
        payload: Prisma.$MovieSchedulesPayload<ExtArgs>
        fields: Prisma.MovieSchedulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieSchedulesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieSchedulesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>
          }
          findFirst: {
            args: Prisma.MovieSchedulesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieSchedulesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>
          }
          findMany: {
            args: Prisma.MovieSchedulesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>[]
          }
          create: {
            args: Prisma.MovieSchedulesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>
          }
          createMany: {
            args: Prisma.MovieSchedulesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieSchedulesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>[]
          }
          delete: {
            args: Prisma.MovieSchedulesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>
          }
          update: {
            args: Prisma.MovieSchedulesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>
          }
          deleteMany: {
            args: Prisma.MovieSchedulesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovieSchedulesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MovieSchedulesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>[]
          }
          upsert: {
            args: Prisma.MovieSchedulesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieSchedulesPayload>
          }
          aggregate: {
            args: Prisma.MovieSchedulesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovieSchedules>
          }
          groupBy: {
            args: Prisma.MovieSchedulesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieSchedulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieSchedulesCountArgs<ExtArgs>
            result: $Utils.Optional<MovieSchedulesCountAggregateOutputType> | number
          }
        }
      }
      Tickets: {
        payload: Prisma.$TicketsPayload<ExtArgs>
        fields: Prisma.TicketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          findFirst: {
            args: Prisma.TicketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          findMany: {
            args: Prisma.TicketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>[]
          }
          create: {
            args: Prisma.TicketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          createMany: {
            args: Prisma.TicketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>[]
          }
          delete: {
            args: Prisma.TicketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          update: {
            args: Prisma.TicketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          deleteMany: {
            args: Prisma.TicketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TicketsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>[]
          }
          upsert: {
            args: Prisma.TicketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          aggregate: {
            args: Prisma.TicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickets>
          }
          groupBy: {
            args: Prisma.TicketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketsCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsCountAggregateOutputType> | number
          }
        }
      }
      Stripe: {
        payload: Prisma.$StripePayload<ExtArgs>
        fields: Prisma.StripeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StripeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StripeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          findFirst: {
            args: Prisma.StripeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StripeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          findMany: {
            args: Prisma.StripeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>[]
          }
          create: {
            args: Prisma.StripeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          createMany: {
            args: Prisma.StripeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StripeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>[]
          }
          delete: {
            args: Prisma.StripeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          update: {
            args: Prisma.StripeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          deleteMany: {
            args: Prisma.StripeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StripeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StripeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>[]
          }
          upsert: {
            args: Prisma.StripeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StripePayload>
          }
          aggregate: {
            args: Prisma.StripeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStripe>
          }
          groupBy: {
            args: Prisma.StripeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StripeGroupByOutputType>[]
          }
          count: {
            args: Prisma.StripeCountArgs<ExtArgs>
            result: $Utils.Optional<StripeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    admin?: AdminOmit
    user?: UserOmit
    theaters?: TheatersOmit
    seats?: SeatsOmit
    movies?: MoviesOmit
    movieSchedules?: MovieSchedulesOmit
    tickets?: TicketsOmit
    stripe?: StripeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    theaters: number
    seats: number
    tickets: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    theaters?: boolean | UserCountOutputTypeCountTheatersArgs
    seats?: boolean | UserCountOutputTypeCountSeatsArgs
    tickets?: boolean | UserCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTheatersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheatersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSeatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
  }


  /**
   * Count Type TheatersCountOutputType
   */

  export type TheatersCountOutputType = {
    movies: number
    users: number
    seats: number
  }

  export type TheatersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movies?: boolean | TheatersCountOutputTypeCountMoviesArgs
    users?: boolean | TheatersCountOutputTypeCountUsersArgs
    seats?: boolean | TheatersCountOutputTypeCountSeatsArgs
  }

  // Custom InputTypes
  /**
   * TheatersCountOutputType without action
   */
  export type TheatersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheatersCountOutputType
     */
    select?: TheatersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TheatersCountOutputType without action
   */
  export type TheatersCountOutputTypeCountMoviesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MoviesWhereInput
  }

  /**
   * TheatersCountOutputType without action
   */
  export type TheatersCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TheatersCountOutputType without action
   */
  export type TheatersCountOutputTypeCountSeatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatsWhereInput
  }


  /**
   * Count Type SeatsCountOutputType
   */

  export type SeatsCountOutputType = {
    users: number
  }

  export type SeatsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SeatsCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * SeatsCountOutputType without action
   */
  export type SeatsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsCountOutputType
     */
    select?: SeatsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeatsCountOutputType without action
   */
  export type SeatsCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type MoviesCountOutputType
   */

  export type MoviesCountOutputType = {
    schedules: number
    theaters: number
  }

  export type MoviesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | MoviesCountOutputTypeCountSchedulesArgs
    theaters?: boolean | MoviesCountOutputTypeCountTheatersArgs
  }

  // Custom InputTypes
  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MoviesCountOutputType
     */
    select?: MoviesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieSchedulesWhereInput
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountTheatersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheatersWhereInput
  }


  /**
   * Count Type MovieSchedulesCountOutputType
   */

  export type MovieSchedulesCountOutputType = {
    tickets: number
  }

  export type MovieSchedulesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | MovieSchedulesCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * MovieSchedulesCountOutputType without action
   */
  export type MovieSchedulesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedulesCountOutputType
     */
    select?: MovieSchedulesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MovieSchedulesCountOutputType without action
   */
  export type MovieSchedulesCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
  }


  /**
   * Count Type StripeCountOutputType
   */

  export type StripeCountOutputType = {
    tickets: number
  }

  export type StripeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | StripeCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * StripeCountOutputType without action
   */
  export type StripeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StripeCountOutputType
     */
    select?: StripeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StripeCountOutputType without action
   */
  export type StripeCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    adminId: number | null
  }

  export type AdminSumAggregateOutputType = {
    adminId: number | null
  }

  export type AdminMinAggregateOutputType = {
    adminId: number | null
    username: string | null
    password: string | null
    role: $Enums.AdminRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    adminId: number | null
    username: string | null
    password: string | null
    role: $Enums.AdminRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    adminId: number
    username: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    adminId?: true
  }

  export type AdminSumAggregateInputType = {
    adminId?: true
  }

  export type AdminMinAggregateInputType = {
    adminId?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    adminId?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    adminId?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    adminId: number
    username: string
    password: string
    role: $Enums.AdminRole
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminId?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminId?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    adminId?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    adminId?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"adminId" | "username" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      adminId: number
      username: string
      password: string
      role: $Enums.AdminRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.findMany({ select: { adminId: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { adminId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `adminId`
     * const adminWithAdminIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { adminId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly adminId: FieldRef<"Admin", 'Int'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'AdminRole'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    email: number
    password: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    email: string
    password: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    theaters?: boolean | User$theatersArgs<ExtArgs>
    seats?: boolean | User$seatsArgs<ExtArgs>
    tickets?: boolean | User$ticketsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "email" | "password" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    theaters?: boolean | User$theatersArgs<ExtArgs>
    seats?: boolean | User$seatsArgs<ExtArgs>
    tickets?: boolean | User$ticketsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      theaters: Prisma.$TheatersPayload<ExtArgs>[]
      seats: Prisma.$SeatsPayload<ExtArgs>[]
      tickets: Prisma.$TicketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      email: string
      password: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    theaters<T extends User$theatersArgs<ExtArgs> = {}>(args?: Subset<T, User$theatersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    seats<T extends User$seatsArgs<ExtArgs> = {}>(args?: Subset<T, User$seatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tickets<T extends User$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, User$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.theaters
   */
  export type User$theatersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    where?: TheatersWhereInput
    orderBy?: TheatersOrderByWithRelationInput | TheatersOrderByWithRelationInput[]
    cursor?: TheatersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TheatersScalarFieldEnum | TheatersScalarFieldEnum[]
  }

  /**
   * User.seats
   */
  export type User$seatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    where?: SeatsWhereInput
    orderBy?: SeatsOrderByWithRelationInput | SeatsOrderByWithRelationInput[]
    cursor?: SeatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatsScalarFieldEnum | SeatsScalarFieldEnum[]
  }

  /**
   * User.tickets
   */
  export type User$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Theaters
   */

  export type AggregateTheaters = {
    _count: TheatersCountAggregateOutputType | null
    _avg: TheatersAvgAggregateOutputType | null
    _sum: TheatersSumAggregateOutputType | null
    _min: TheatersMinAggregateOutputType | null
    _max: TheatersMaxAggregateOutputType | null
  }

  export type TheatersAvgAggregateOutputType = {
    theatherId: number | null
  }

  export type TheatersSumAggregateOutputType = {
    theatherId: number | null
  }

  export type TheatersMinAggregateOutputType = {
    theatherId: number | null
    name: string | null
    location: string | null
  }

  export type TheatersMaxAggregateOutputType = {
    theatherId: number | null
    name: string | null
    location: string | null
  }

  export type TheatersCountAggregateOutputType = {
    theatherId: number
    name: number
    location: number
    _all: number
  }


  export type TheatersAvgAggregateInputType = {
    theatherId?: true
  }

  export type TheatersSumAggregateInputType = {
    theatherId?: true
  }

  export type TheatersMinAggregateInputType = {
    theatherId?: true
    name?: true
    location?: true
  }

  export type TheatersMaxAggregateInputType = {
    theatherId?: true
    name?: true
    location?: true
  }

  export type TheatersCountAggregateInputType = {
    theatherId?: true
    name?: true
    location?: true
    _all?: true
  }

  export type TheatersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theaters to aggregate.
     */
    where?: TheatersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theaters to fetch.
     */
    orderBy?: TheatersOrderByWithRelationInput | TheatersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TheatersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theaters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Theaters
    **/
    _count?: true | TheatersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TheatersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TheatersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TheatersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TheatersMaxAggregateInputType
  }

  export type GetTheatersAggregateType<T extends TheatersAggregateArgs> = {
        [P in keyof T & keyof AggregateTheaters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheaters[P]>
      : GetScalarType<T[P], AggregateTheaters[P]>
  }




  export type TheatersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheatersWhereInput
    orderBy?: TheatersOrderByWithAggregationInput | TheatersOrderByWithAggregationInput[]
    by: TheatersScalarFieldEnum[] | TheatersScalarFieldEnum
    having?: TheatersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TheatersCountAggregateInputType | true
    _avg?: TheatersAvgAggregateInputType
    _sum?: TheatersSumAggregateInputType
    _min?: TheatersMinAggregateInputType
    _max?: TheatersMaxAggregateInputType
  }

  export type TheatersGroupByOutputType = {
    theatherId: number
    name: string
    location: string
    _count: TheatersCountAggregateOutputType | null
    _avg: TheatersAvgAggregateOutputType | null
    _sum: TheatersSumAggregateOutputType | null
    _min: TheatersMinAggregateOutputType | null
    _max: TheatersMaxAggregateOutputType | null
  }

  type GetTheatersGroupByPayload<T extends TheatersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TheatersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TheatersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TheatersGroupByOutputType[P]>
            : GetScalarType<T[P], TheatersGroupByOutputType[P]>
        }
      >
    >


  export type TheatersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    theatherId?: boolean
    name?: boolean
    location?: boolean
    movies?: boolean | Theaters$moviesArgs<ExtArgs>
    users?: boolean | Theaters$usersArgs<ExtArgs>
    seats?: boolean | Theaters$seatsArgs<ExtArgs>
    _count?: boolean | TheatersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theaters"]>

  export type TheatersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    theatherId?: boolean
    name?: boolean
    location?: boolean
  }, ExtArgs["result"]["theaters"]>

  export type TheatersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    theatherId?: boolean
    name?: boolean
    location?: boolean
  }, ExtArgs["result"]["theaters"]>

  export type TheatersSelectScalar = {
    theatherId?: boolean
    name?: boolean
    location?: boolean
  }

  export type TheatersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"theatherId" | "name" | "location", ExtArgs["result"]["theaters"]>
  export type TheatersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movies?: boolean | Theaters$moviesArgs<ExtArgs>
    users?: boolean | Theaters$usersArgs<ExtArgs>
    seats?: boolean | Theaters$seatsArgs<ExtArgs>
    _count?: boolean | TheatersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TheatersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TheatersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TheatersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Theaters"
    objects: {
      movies: Prisma.$MoviesPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      seats: Prisma.$SeatsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      theatherId: number
      name: string
      location: string
    }, ExtArgs["result"]["theaters"]>
    composites: {}
  }

  type TheatersGetPayload<S extends boolean | null | undefined | TheatersDefaultArgs> = $Result.GetResult<Prisma.$TheatersPayload, S>

  type TheatersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TheatersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TheatersCountAggregateInputType | true
    }

  export interface TheatersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Theaters'], meta: { name: 'Theaters' } }
    /**
     * Find zero or one Theaters that matches the filter.
     * @param {TheatersFindUniqueArgs} args - Arguments to find a Theaters
     * @example
     * // Get one Theaters
     * const theaters = await prisma.theaters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TheatersFindUniqueArgs>(args: SelectSubset<T, TheatersFindUniqueArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Theaters that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TheatersFindUniqueOrThrowArgs} args - Arguments to find a Theaters
     * @example
     * // Get one Theaters
     * const theaters = await prisma.theaters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TheatersFindUniqueOrThrowArgs>(args: SelectSubset<T, TheatersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Theaters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersFindFirstArgs} args - Arguments to find a Theaters
     * @example
     * // Get one Theaters
     * const theaters = await prisma.theaters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TheatersFindFirstArgs>(args?: SelectSubset<T, TheatersFindFirstArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Theaters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersFindFirstOrThrowArgs} args - Arguments to find a Theaters
     * @example
     * // Get one Theaters
     * const theaters = await prisma.theaters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TheatersFindFirstOrThrowArgs>(args?: SelectSubset<T, TheatersFindFirstOrThrowArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Theaters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Theaters
     * const theaters = await prisma.theaters.findMany()
     * 
     * // Get first 10 Theaters
     * const theaters = await prisma.theaters.findMany({ take: 10 })
     * 
     * // Only select the `theatherId`
     * const theatersWithTheatherIdOnly = await prisma.theaters.findMany({ select: { theatherId: true } })
     * 
     */
    findMany<T extends TheatersFindManyArgs>(args?: SelectSubset<T, TheatersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Theaters.
     * @param {TheatersCreateArgs} args - Arguments to create a Theaters.
     * @example
     * // Create one Theaters
     * const Theaters = await prisma.theaters.create({
     *   data: {
     *     // ... data to create a Theaters
     *   }
     * })
     * 
     */
    create<T extends TheatersCreateArgs>(args: SelectSubset<T, TheatersCreateArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Theaters.
     * @param {TheatersCreateManyArgs} args - Arguments to create many Theaters.
     * @example
     * // Create many Theaters
     * const theaters = await prisma.theaters.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TheatersCreateManyArgs>(args?: SelectSubset<T, TheatersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Theaters and returns the data saved in the database.
     * @param {TheatersCreateManyAndReturnArgs} args - Arguments to create many Theaters.
     * @example
     * // Create many Theaters
     * const theaters = await prisma.theaters.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Theaters and only return the `theatherId`
     * const theatersWithTheatherIdOnly = await prisma.theaters.createManyAndReturn({
     *   select: { theatherId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TheatersCreateManyAndReturnArgs>(args?: SelectSubset<T, TheatersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Theaters.
     * @param {TheatersDeleteArgs} args - Arguments to delete one Theaters.
     * @example
     * // Delete one Theaters
     * const Theaters = await prisma.theaters.delete({
     *   where: {
     *     // ... filter to delete one Theaters
     *   }
     * })
     * 
     */
    delete<T extends TheatersDeleteArgs>(args: SelectSubset<T, TheatersDeleteArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Theaters.
     * @param {TheatersUpdateArgs} args - Arguments to update one Theaters.
     * @example
     * // Update one Theaters
     * const theaters = await prisma.theaters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TheatersUpdateArgs>(args: SelectSubset<T, TheatersUpdateArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Theaters.
     * @param {TheatersDeleteManyArgs} args - Arguments to filter Theaters to delete.
     * @example
     * // Delete a few Theaters
     * const { count } = await prisma.theaters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TheatersDeleteManyArgs>(args?: SelectSubset<T, TheatersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Theaters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Theaters
     * const theaters = await prisma.theaters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TheatersUpdateManyArgs>(args: SelectSubset<T, TheatersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Theaters and returns the data updated in the database.
     * @param {TheatersUpdateManyAndReturnArgs} args - Arguments to update many Theaters.
     * @example
     * // Update many Theaters
     * const theaters = await prisma.theaters.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Theaters and only return the `theatherId`
     * const theatersWithTheatherIdOnly = await prisma.theaters.updateManyAndReturn({
     *   select: { theatherId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TheatersUpdateManyAndReturnArgs>(args: SelectSubset<T, TheatersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Theaters.
     * @param {TheatersUpsertArgs} args - Arguments to update or create a Theaters.
     * @example
     * // Update or create a Theaters
     * const theaters = await prisma.theaters.upsert({
     *   create: {
     *     // ... data to create a Theaters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theaters we want to update
     *   }
     * })
     */
    upsert<T extends TheatersUpsertArgs>(args: SelectSubset<T, TheatersUpsertArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Theaters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersCountArgs} args - Arguments to filter Theaters to count.
     * @example
     * // Count the number of Theaters
     * const count = await prisma.theaters.count({
     *   where: {
     *     // ... the filter for the Theaters we want to count
     *   }
     * })
    **/
    count<T extends TheatersCountArgs>(
      args?: Subset<T, TheatersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TheatersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theaters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TheatersAggregateArgs>(args: Subset<T, TheatersAggregateArgs>): Prisma.PrismaPromise<GetTheatersAggregateType<T>>

    /**
     * Group by Theaters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheatersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TheatersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TheatersGroupByArgs['orderBy'] }
        : { orderBy?: TheatersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TheatersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTheatersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Theaters model
   */
  readonly fields: TheatersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Theaters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TheatersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    movies<T extends Theaters$moviesArgs<ExtArgs> = {}>(args?: Subset<T, Theaters$moviesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    users<T extends Theaters$usersArgs<ExtArgs> = {}>(args?: Subset<T, Theaters$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    seats<T extends Theaters$seatsArgs<ExtArgs> = {}>(args?: Subset<T, Theaters$seatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Theaters model
   */ 
  interface TheatersFieldRefs {
    readonly theatherId: FieldRef<"Theaters", 'Int'>
    readonly name: FieldRef<"Theaters", 'String'>
    readonly location: FieldRef<"Theaters", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Theaters findUnique
   */
  export type TheatersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * Filter, which Theaters to fetch.
     */
    where: TheatersWhereUniqueInput
  }

  /**
   * Theaters findUniqueOrThrow
   */
  export type TheatersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * Filter, which Theaters to fetch.
     */
    where: TheatersWhereUniqueInput
  }

  /**
   * Theaters findFirst
   */
  export type TheatersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * Filter, which Theaters to fetch.
     */
    where?: TheatersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theaters to fetch.
     */
    orderBy?: TheatersOrderByWithRelationInput | TheatersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Theaters.
     */
    cursor?: TheatersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theaters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Theaters.
     */
    distinct?: TheatersScalarFieldEnum | TheatersScalarFieldEnum[]
  }

  /**
   * Theaters findFirstOrThrow
   */
  export type TheatersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * Filter, which Theaters to fetch.
     */
    where?: TheatersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theaters to fetch.
     */
    orderBy?: TheatersOrderByWithRelationInput | TheatersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Theaters.
     */
    cursor?: TheatersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theaters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Theaters.
     */
    distinct?: TheatersScalarFieldEnum | TheatersScalarFieldEnum[]
  }

  /**
   * Theaters findMany
   */
  export type TheatersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * Filter, which Theaters to fetch.
     */
    where?: TheatersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Theaters to fetch.
     */
    orderBy?: TheatersOrderByWithRelationInput | TheatersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Theaters.
     */
    cursor?: TheatersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Theaters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Theaters.
     */
    skip?: number
    distinct?: TheatersScalarFieldEnum | TheatersScalarFieldEnum[]
  }

  /**
   * Theaters create
   */
  export type TheatersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * The data needed to create a Theaters.
     */
    data: XOR<TheatersCreateInput, TheatersUncheckedCreateInput>
  }

  /**
   * Theaters createMany
   */
  export type TheatersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Theaters.
     */
    data: TheatersCreateManyInput | TheatersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theaters createManyAndReturn
   */
  export type TheatersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * The data used to create many Theaters.
     */
    data: TheatersCreateManyInput | TheatersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theaters update
   */
  export type TheatersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * The data needed to update a Theaters.
     */
    data: XOR<TheatersUpdateInput, TheatersUncheckedUpdateInput>
    /**
     * Choose, which Theaters to update.
     */
    where: TheatersWhereUniqueInput
  }

  /**
   * Theaters updateMany
   */
  export type TheatersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Theaters.
     */
    data: XOR<TheatersUpdateManyMutationInput, TheatersUncheckedUpdateManyInput>
    /**
     * Filter which Theaters to update
     */
    where?: TheatersWhereInput
  }

  /**
   * Theaters updateManyAndReturn
   */
  export type TheatersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * The data used to update Theaters.
     */
    data: XOR<TheatersUpdateManyMutationInput, TheatersUncheckedUpdateManyInput>
    /**
     * Filter which Theaters to update
     */
    where?: TheatersWhereInput
  }

  /**
   * Theaters upsert
   */
  export type TheatersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * The filter to search for the Theaters to update in case it exists.
     */
    where: TheatersWhereUniqueInput
    /**
     * In case the Theaters found by the `where` argument doesn't exist, create a new Theaters with this data.
     */
    create: XOR<TheatersCreateInput, TheatersUncheckedCreateInput>
    /**
     * In case the Theaters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TheatersUpdateInput, TheatersUncheckedUpdateInput>
  }

  /**
   * Theaters delete
   */
  export type TheatersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    /**
     * Filter which Theaters to delete.
     */
    where: TheatersWhereUniqueInput
  }

  /**
   * Theaters deleteMany
   */
  export type TheatersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theaters to delete
     */
    where?: TheatersWhereInput
  }

  /**
   * Theaters.movies
   */
  export type Theaters$moviesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    where?: MoviesWhereInput
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    cursor?: MoviesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Theaters.users
   */
  export type Theaters$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Theaters.seats
   */
  export type Theaters$seatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    where?: SeatsWhereInput
    orderBy?: SeatsOrderByWithRelationInput | SeatsOrderByWithRelationInput[]
    cursor?: SeatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatsScalarFieldEnum | SeatsScalarFieldEnum[]
  }

  /**
   * Theaters without action
   */
  export type TheatersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
  }


  /**
   * Model Seats
   */

  export type AggregateSeats = {
    _count: SeatsCountAggregateOutputType | null
    _avg: SeatsAvgAggregateOutputType | null
    _sum: SeatsSumAggregateOutputType | null
    _min: SeatsMinAggregateOutputType | null
    _max: SeatsMaxAggregateOutputType | null
  }

  export type SeatsAvgAggregateOutputType = {
    seatId: number | null
    theaterID: number | null
  }

  export type SeatsSumAggregateOutputType = {
    seatId: number | null
    theaterID: number | null
  }

  export type SeatsMinAggregateOutputType = {
    seatId: number | null
    seatNumber: string | null
    seatType: string | null
    theaterID: number | null
  }

  export type SeatsMaxAggregateOutputType = {
    seatId: number | null
    seatNumber: string | null
    seatType: string | null
    theaterID: number | null
  }

  export type SeatsCountAggregateOutputType = {
    seatId: number
    seatNumber: number
    seatType: number
    theaterID: number
    _all: number
  }


  export type SeatsAvgAggregateInputType = {
    seatId?: true
    theaterID?: true
  }

  export type SeatsSumAggregateInputType = {
    seatId?: true
    theaterID?: true
  }

  export type SeatsMinAggregateInputType = {
    seatId?: true
    seatNumber?: true
    seatType?: true
    theaterID?: true
  }

  export type SeatsMaxAggregateInputType = {
    seatId?: true
    seatNumber?: true
    seatType?: true
    theaterID?: true
  }

  export type SeatsCountAggregateInputType = {
    seatId?: true
    seatNumber?: true
    seatType?: true
    theaterID?: true
    _all?: true
  }

  export type SeatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seats to aggregate.
     */
    where?: SeatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatsOrderByWithRelationInput | SeatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seats
    **/
    _count?: true | SeatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatsMaxAggregateInputType
  }

  export type GetSeatsAggregateType<T extends SeatsAggregateArgs> = {
        [P in keyof T & keyof AggregateSeats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeats[P]>
      : GetScalarType<T[P], AggregateSeats[P]>
  }




  export type SeatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatsWhereInput
    orderBy?: SeatsOrderByWithAggregationInput | SeatsOrderByWithAggregationInput[]
    by: SeatsScalarFieldEnum[] | SeatsScalarFieldEnum
    having?: SeatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatsCountAggregateInputType | true
    _avg?: SeatsAvgAggregateInputType
    _sum?: SeatsSumAggregateInputType
    _min?: SeatsMinAggregateInputType
    _max?: SeatsMaxAggregateInputType
  }

  export type SeatsGroupByOutputType = {
    seatId: number
    seatNumber: string
    seatType: string
    theaterID: number
    _count: SeatsCountAggregateOutputType | null
    _avg: SeatsAvgAggregateOutputType | null
    _sum: SeatsSumAggregateOutputType | null
    _min: SeatsMinAggregateOutputType | null
    _max: SeatsMaxAggregateOutputType | null
  }

  type GetSeatsGroupByPayload<T extends SeatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatsGroupByOutputType[P]>
            : GetScalarType<T[P], SeatsGroupByOutputType[P]>
        }
      >
    >


  export type SeatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    seatId?: boolean
    seatNumber?: boolean
    seatType?: boolean
    theaterID?: boolean
    theater?: boolean | TheatersDefaultArgs<ExtArgs>
    users?: boolean | Seats$usersArgs<ExtArgs>
    _count?: boolean | SeatsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seats"]>

  export type SeatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    seatId?: boolean
    seatNumber?: boolean
    seatType?: boolean
    theaterID?: boolean
    theater?: boolean | TheatersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seats"]>

  export type SeatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    seatId?: boolean
    seatNumber?: boolean
    seatType?: boolean
    theaterID?: boolean
    theater?: boolean | TheatersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seats"]>

  export type SeatsSelectScalar = {
    seatId?: boolean
    seatNumber?: boolean
    seatType?: boolean
    theaterID?: boolean
  }

  export type SeatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"seatId" | "seatNumber" | "seatType" | "theaterID", ExtArgs["result"]["seats"]>
  export type SeatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    theater?: boolean | TheatersDefaultArgs<ExtArgs>
    users?: boolean | Seats$usersArgs<ExtArgs>
    _count?: boolean | SeatsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    theater?: boolean | TheatersDefaultArgs<ExtArgs>
  }
  export type SeatsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    theater?: boolean | TheatersDefaultArgs<ExtArgs>
  }

  export type $SeatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seats"
    objects: {
      theater: Prisma.$TheatersPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      seatId: number
      seatNumber: string
      seatType: string
      theaterID: number
    }, ExtArgs["result"]["seats"]>
    composites: {}
  }

  type SeatsGetPayload<S extends boolean | null | undefined | SeatsDefaultArgs> = $Result.GetResult<Prisma.$SeatsPayload, S>

  type SeatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SeatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SeatsCountAggregateInputType | true
    }

  export interface SeatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seats'], meta: { name: 'Seats' } }
    /**
     * Find zero or one Seats that matches the filter.
     * @param {SeatsFindUniqueArgs} args - Arguments to find a Seats
     * @example
     * // Get one Seats
     * const seats = await prisma.seats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeatsFindUniqueArgs>(args: SelectSubset<T, SeatsFindUniqueArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Seats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SeatsFindUniqueOrThrowArgs} args - Arguments to find a Seats
     * @example
     * // Get one Seats
     * const seats = await prisma.seats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeatsFindUniqueOrThrowArgs>(args: SelectSubset<T, SeatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Seats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsFindFirstArgs} args - Arguments to find a Seats
     * @example
     * // Get one Seats
     * const seats = await prisma.seats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeatsFindFirstArgs>(args?: SelectSubset<T, SeatsFindFirstArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Seats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsFindFirstOrThrowArgs} args - Arguments to find a Seats
     * @example
     * // Get one Seats
     * const seats = await prisma.seats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeatsFindFirstOrThrowArgs>(args?: SelectSubset<T, SeatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Seats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seats
     * const seats = await prisma.seats.findMany()
     * 
     * // Get first 10 Seats
     * const seats = await prisma.seats.findMany({ take: 10 })
     * 
     * // Only select the `seatId`
     * const seatsWithSeatIdOnly = await prisma.seats.findMany({ select: { seatId: true } })
     * 
     */
    findMany<T extends SeatsFindManyArgs>(args?: SelectSubset<T, SeatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Seats.
     * @param {SeatsCreateArgs} args - Arguments to create a Seats.
     * @example
     * // Create one Seats
     * const Seats = await prisma.seats.create({
     *   data: {
     *     // ... data to create a Seats
     *   }
     * })
     * 
     */
    create<T extends SeatsCreateArgs>(args: SelectSubset<T, SeatsCreateArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Seats.
     * @param {SeatsCreateManyArgs} args - Arguments to create many Seats.
     * @example
     * // Create many Seats
     * const seats = await prisma.seats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeatsCreateManyArgs>(args?: SelectSubset<T, SeatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seats and returns the data saved in the database.
     * @param {SeatsCreateManyAndReturnArgs} args - Arguments to create many Seats.
     * @example
     * // Create many Seats
     * const seats = await prisma.seats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seats and only return the `seatId`
     * const seatsWithSeatIdOnly = await prisma.seats.createManyAndReturn({
     *   select: { seatId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeatsCreateManyAndReturnArgs>(args?: SelectSubset<T, SeatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Seats.
     * @param {SeatsDeleteArgs} args - Arguments to delete one Seats.
     * @example
     * // Delete one Seats
     * const Seats = await prisma.seats.delete({
     *   where: {
     *     // ... filter to delete one Seats
     *   }
     * })
     * 
     */
    delete<T extends SeatsDeleteArgs>(args: SelectSubset<T, SeatsDeleteArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Seats.
     * @param {SeatsUpdateArgs} args - Arguments to update one Seats.
     * @example
     * // Update one Seats
     * const seats = await prisma.seats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeatsUpdateArgs>(args: SelectSubset<T, SeatsUpdateArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Seats.
     * @param {SeatsDeleteManyArgs} args - Arguments to filter Seats to delete.
     * @example
     * // Delete a few Seats
     * const { count } = await prisma.seats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeatsDeleteManyArgs>(args?: SelectSubset<T, SeatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seats
     * const seats = await prisma.seats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeatsUpdateManyArgs>(args: SelectSubset<T, SeatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats and returns the data updated in the database.
     * @param {SeatsUpdateManyAndReturnArgs} args - Arguments to update many Seats.
     * @example
     * // Update many Seats
     * const seats = await prisma.seats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Seats and only return the `seatId`
     * const seatsWithSeatIdOnly = await prisma.seats.updateManyAndReturn({
     *   select: { seatId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SeatsUpdateManyAndReturnArgs>(args: SelectSubset<T, SeatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Seats.
     * @param {SeatsUpsertArgs} args - Arguments to update or create a Seats.
     * @example
     * // Update or create a Seats
     * const seats = await prisma.seats.upsert({
     *   create: {
     *     // ... data to create a Seats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seats we want to update
     *   }
     * })
     */
    upsert<T extends SeatsUpsertArgs>(args: SelectSubset<T, SeatsUpsertArgs<ExtArgs>>): Prisma__SeatsClient<$Result.GetResult<Prisma.$SeatsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsCountArgs} args - Arguments to filter Seats to count.
     * @example
     * // Count the number of Seats
     * const count = await prisma.seats.count({
     *   where: {
     *     // ... the filter for the Seats we want to count
     *   }
     * })
    **/
    count<T extends SeatsCountArgs>(
      args?: Subset<T, SeatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatsAggregateArgs>(args: Subset<T, SeatsAggregateArgs>): Prisma.PrismaPromise<GetSeatsAggregateType<T>>

    /**
     * Group by Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeatsGroupByArgs['orderBy'] }
        : { orderBy?: SeatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seats model
   */
  readonly fields: SeatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    theater<T extends TheatersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TheatersDefaultArgs<ExtArgs>>): Prisma__TheatersClient<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    users<T extends Seats$usersArgs<ExtArgs> = {}>(args?: Subset<T, Seats$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seats model
   */ 
  interface SeatsFieldRefs {
    readonly seatId: FieldRef<"Seats", 'Int'>
    readonly seatNumber: FieldRef<"Seats", 'String'>
    readonly seatType: FieldRef<"Seats", 'String'>
    readonly theaterID: FieldRef<"Seats", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Seats findUnique
   */
  export type SeatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where: SeatsWhereUniqueInput
  }

  /**
   * Seats findUniqueOrThrow
   */
  export type SeatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where: SeatsWhereUniqueInput
  }

  /**
   * Seats findFirst
   */
  export type SeatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where?: SeatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatsOrderByWithRelationInput | SeatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seats.
     */
    cursor?: SeatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seats.
     */
    distinct?: SeatsScalarFieldEnum | SeatsScalarFieldEnum[]
  }

  /**
   * Seats findFirstOrThrow
   */
  export type SeatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where?: SeatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatsOrderByWithRelationInput | SeatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seats.
     */
    cursor?: SeatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seats.
     */
    distinct?: SeatsScalarFieldEnum | SeatsScalarFieldEnum[]
  }

  /**
   * Seats findMany
   */
  export type SeatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where?: SeatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatsOrderByWithRelationInput | SeatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seats.
     */
    cursor?: SeatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    distinct?: SeatsScalarFieldEnum | SeatsScalarFieldEnum[]
  }

  /**
   * Seats create
   */
  export type SeatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * The data needed to create a Seats.
     */
    data: XOR<SeatsCreateInput, SeatsUncheckedCreateInput>
  }

  /**
   * Seats createMany
   */
  export type SeatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seats.
     */
    data: SeatsCreateManyInput | SeatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seats createManyAndReturn
   */
  export type SeatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * The data used to create many Seats.
     */
    data: SeatsCreateManyInput | SeatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seats update
   */
  export type SeatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * The data needed to update a Seats.
     */
    data: XOR<SeatsUpdateInput, SeatsUncheckedUpdateInput>
    /**
     * Choose, which Seats to update.
     */
    where: SeatsWhereUniqueInput
  }

  /**
   * Seats updateMany
   */
  export type SeatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seats.
     */
    data: XOR<SeatsUpdateManyMutationInput, SeatsUncheckedUpdateManyInput>
    /**
     * Filter which Seats to update
     */
    where?: SeatsWhereInput
  }

  /**
   * Seats updateManyAndReturn
   */
  export type SeatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * The data used to update Seats.
     */
    data: XOR<SeatsUpdateManyMutationInput, SeatsUncheckedUpdateManyInput>
    /**
     * Filter which Seats to update
     */
    where?: SeatsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seats upsert
   */
  export type SeatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * The filter to search for the Seats to update in case it exists.
     */
    where: SeatsWhereUniqueInput
    /**
     * In case the Seats found by the `where` argument doesn't exist, create a new Seats with this data.
     */
    create: XOR<SeatsCreateInput, SeatsUncheckedCreateInput>
    /**
     * In case the Seats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeatsUpdateInput, SeatsUncheckedUpdateInput>
  }

  /**
   * Seats delete
   */
  export type SeatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
    /**
     * Filter which Seats to delete.
     */
    where: SeatsWhereUniqueInput
  }

  /**
   * Seats deleteMany
   */
  export type SeatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seats to delete
     */
    where?: SeatsWhereInput
  }

  /**
   * Seats.users
   */
  export type Seats$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Seats without action
   */
  export type SeatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seats
     */
    select?: SeatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seats
     */
    omit?: SeatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInclude<ExtArgs> | null
  }


  /**
   * Model Movies
   */

  export type AggregateMovies = {
    _count: MoviesCountAggregateOutputType | null
    _avg: MoviesAvgAggregateOutputType | null
    _sum: MoviesSumAggregateOutputType | null
    _min: MoviesMinAggregateOutputType | null
    _max: MoviesMaxAggregateOutputType | null
  }

  export type MoviesAvgAggregateOutputType = {
    movieId: number | null
    duration: number | null
  }

  export type MoviesSumAggregateOutputType = {
    movieId: number | null
    duration: number | null
  }

  export type MoviesMinAggregateOutputType = {
    movieId: number | null
    title: string | null
    description: string | null
    duration: number | null
    releaseDate: Date | null
  }

  export type MoviesMaxAggregateOutputType = {
    movieId: number | null
    title: string | null
    description: string | null
    duration: number | null
    releaseDate: Date | null
  }

  export type MoviesCountAggregateOutputType = {
    movieId: number
    title: number
    description: number
    duration: number
    releaseDate: number
    _all: number
  }


  export type MoviesAvgAggregateInputType = {
    movieId?: true
    duration?: true
  }

  export type MoviesSumAggregateInputType = {
    movieId?: true
    duration?: true
  }

  export type MoviesMinAggregateInputType = {
    movieId?: true
    title?: true
    description?: true
    duration?: true
    releaseDate?: true
  }

  export type MoviesMaxAggregateInputType = {
    movieId?: true
    title?: true
    description?: true
    duration?: true
    releaseDate?: true
  }

  export type MoviesCountAggregateInputType = {
    movieId?: true
    title?: true
    description?: true
    duration?: true
    releaseDate?: true
    _all?: true
  }

  export type MoviesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movies to aggregate.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movies
    **/
    _count?: true | MoviesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MoviesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MoviesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MoviesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MoviesMaxAggregateInputType
  }

  export type GetMoviesAggregateType<T extends MoviesAggregateArgs> = {
        [P in keyof T & keyof AggregateMovies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovies[P]>
      : GetScalarType<T[P], AggregateMovies[P]>
  }




  export type MoviesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MoviesWhereInput
    orderBy?: MoviesOrderByWithAggregationInput | MoviesOrderByWithAggregationInput[]
    by: MoviesScalarFieldEnum[] | MoviesScalarFieldEnum
    having?: MoviesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MoviesCountAggregateInputType | true
    _avg?: MoviesAvgAggregateInputType
    _sum?: MoviesSumAggregateInputType
    _min?: MoviesMinAggregateInputType
    _max?: MoviesMaxAggregateInputType
  }

  export type MoviesGroupByOutputType = {
    movieId: number
    title: string
    description: string
    duration: number
    releaseDate: Date
    _count: MoviesCountAggregateOutputType | null
    _avg: MoviesAvgAggregateOutputType | null
    _sum: MoviesSumAggregateOutputType | null
    _min: MoviesMinAggregateOutputType | null
    _max: MoviesMaxAggregateOutputType | null
  }

  type GetMoviesGroupByPayload<T extends MoviesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MoviesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MoviesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MoviesGroupByOutputType[P]>
            : GetScalarType<T[P], MoviesGroupByOutputType[P]>
        }
      >
    >


  export type MoviesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    movieId?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    releaseDate?: boolean
    schedules?: boolean | Movies$schedulesArgs<ExtArgs>
    theaters?: boolean | Movies$theatersArgs<ExtArgs>
    _count?: boolean | MoviesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movies"]>

  export type MoviesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    movieId?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    releaseDate?: boolean
  }, ExtArgs["result"]["movies"]>

  export type MoviesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    movieId?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    releaseDate?: boolean
  }, ExtArgs["result"]["movies"]>

  export type MoviesSelectScalar = {
    movieId?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    releaseDate?: boolean
  }

  export type MoviesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"movieId" | "title" | "description" | "duration" | "releaseDate", ExtArgs["result"]["movies"]>
  export type MoviesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | Movies$schedulesArgs<ExtArgs>
    theaters?: boolean | Movies$theatersArgs<ExtArgs>
    _count?: boolean | MoviesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MoviesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MoviesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MoviesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movies"
    objects: {
      schedules: Prisma.$MovieSchedulesPayload<ExtArgs>[]
      theaters: Prisma.$TheatersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      movieId: number
      title: string
      description: string
      duration: number
      releaseDate: Date
    }, ExtArgs["result"]["movies"]>
    composites: {}
  }

  type MoviesGetPayload<S extends boolean | null | undefined | MoviesDefaultArgs> = $Result.GetResult<Prisma.$MoviesPayload, S>

  type MoviesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MoviesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MoviesCountAggregateInputType | true
    }

  export interface MoviesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movies'], meta: { name: 'Movies' } }
    /**
     * Find zero or one Movies that matches the filter.
     * @param {MoviesFindUniqueArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MoviesFindUniqueArgs>(args: SelectSubset<T, MoviesFindUniqueArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Movies that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MoviesFindUniqueOrThrowArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MoviesFindUniqueOrThrowArgs>(args: SelectSubset<T, MoviesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesFindFirstArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MoviesFindFirstArgs>(args?: SelectSubset<T, MoviesFindFirstArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Movies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesFindFirstOrThrowArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MoviesFindFirstOrThrowArgs>(args?: SelectSubset<T, MoviesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movies.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movies.findMany({ take: 10 })
     * 
     * // Only select the `movieId`
     * const moviesWithMovieIdOnly = await prisma.movies.findMany({ select: { movieId: true } })
     * 
     */
    findMany<T extends MoviesFindManyArgs>(args?: SelectSubset<T, MoviesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Movies.
     * @param {MoviesCreateArgs} args - Arguments to create a Movies.
     * @example
     * // Create one Movies
     * const Movies = await prisma.movies.create({
     *   data: {
     *     // ... data to create a Movies
     *   }
     * })
     * 
     */
    create<T extends MoviesCreateArgs>(args: SelectSubset<T, MoviesCreateArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Movies.
     * @param {MoviesCreateManyArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movies = await prisma.movies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MoviesCreateManyArgs>(args?: SelectSubset<T, MoviesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movies and returns the data saved in the database.
     * @param {MoviesCreateManyAndReturnArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movies = await prisma.movies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movies and only return the `movieId`
     * const moviesWithMovieIdOnly = await prisma.movies.createManyAndReturn({
     *   select: { movieId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MoviesCreateManyAndReturnArgs>(args?: SelectSubset<T, MoviesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Movies.
     * @param {MoviesDeleteArgs} args - Arguments to delete one Movies.
     * @example
     * // Delete one Movies
     * const Movies = await prisma.movies.delete({
     *   where: {
     *     // ... filter to delete one Movies
     *   }
     * })
     * 
     */
    delete<T extends MoviesDeleteArgs>(args: SelectSubset<T, MoviesDeleteArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Movies.
     * @param {MoviesUpdateArgs} args - Arguments to update one Movies.
     * @example
     * // Update one Movies
     * const movies = await prisma.movies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MoviesUpdateArgs>(args: SelectSubset<T, MoviesUpdateArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Movies.
     * @param {MoviesDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MoviesDeleteManyArgs>(args?: SelectSubset<T, MoviesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movies = await prisma.movies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MoviesUpdateManyArgs>(args: SelectSubset<T, MoviesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies and returns the data updated in the database.
     * @param {MoviesUpdateManyAndReturnArgs} args - Arguments to update many Movies.
     * @example
     * // Update many Movies
     * const movies = await prisma.movies.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Movies and only return the `movieId`
     * const moviesWithMovieIdOnly = await prisma.movies.updateManyAndReturn({
     *   select: { movieId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MoviesUpdateManyAndReturnArgs>(args: SelectSubset<T, MoviesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Movies.
     * @param {MoviesUpsertArgs} args - Arguments to update or create a Movies.
     * @example
     * // Update or create a Movies
     * const movies = await prisma.movies.upsert({
     *   create: {
     *     // ... data to create a Movies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movies we want to update
     *   }
     * })
     */
    upsert<T extends MoviesUpsertArgs>(args: SelectSubset<T, MoviesUpsertArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movies.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends MoviesCountArgs>(
      args?: Subset<T, MoviesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MoviesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MoviesAggregateArgs>(args: Subset<T, MoviesAggregateArgs>): Prisma.PrismaPromise<GetMoviesAggregateType<T>>

    /**
     * Group by Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MoviesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MoviesGroupByArgs['orderBy'] }
        : { orderBy?: MoviesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MoviesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoviesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movies model
   */
  readonly fields: MoviesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MoviesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedules<T extends Movies$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Movies$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    theaters<T extends Movies$theatersArgs<ExtArgs> = {}>(args?: Subset<T, Movies$theatersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheatersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Movies model
   */ 
  interface MoviesFieldRefs {
    readonly movieId: FieldRef<"Movies", 'Int'>
    readonly title: FieldRef<"Movies", 'String'>
    readonly description: FieldRef<"Movies", 'String'>
    readonly duration: FieldRef<"Movies", 'Int'>
    readonly releaseDate: FieldRef<"Movies", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Movies findUnique
   */
  export type MoviesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies findUniqueOrThrow
   */
  export type MoviesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies findFirst
   */
  export type MoviesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Movies findFirstOrThrow
   */
  export type MoviesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Movies findMany
   */
  export type MoviesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movies.
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Movies create
   */
  export type MoviesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * The data needed to create a Movies.
     */
    data: XOR<MoviesCreateInput, MoviesUncheckedCreateInput>
  }

  /**
   * Movies createMany
   */
  export type MoviesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movies.
     */
    data: MoviesCreateManyInput | MoviesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movies createManyAndReturn
   */
  export type MoviesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * The data used to create many Movies.
     */
    data: MoviesCreateManyInput | MoviesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movies update
   */
  export type MoviesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * The data needed to update a Movies.
     */
    data: XOR<MoviesUpdateInput, MoviesUncheckedUpdateInput>
    /**
     * Choose, which Movies to update.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies updateMany
   */
  export type MoviesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movies.
     */
    data: XOR<MoviesUpdateManyMutationInput, MoviesUncheckedUpdateManyInput>
    /**
     * Filter which Movies to update
     */
    where?: MoviesWhereInput
  }

  /**
   * Movies updateManyAndReturn
   */
  export type MoviesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * The data used to update Movies.
     */
    data: XOR<MoviesUpdateManyMutationInput, MoviesUncheckedUpdateManyInput>
    /**
     * Filter which Movies to update
     */
    where?: MoviesWhereInput
  }

  /**
   * Movies upsert
   */
  export type MoviesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * The filter to search for the Movies to update in case it exists.
     */
    where: MoviesWhereUniqueInput
    /**
     * In case the Movies found by the `where` argument doesn't exist, create a new Movies with this data.
     */
    create: XOR<MoviesCreateInput, MoviesUncheckedCreateInput>
    /**
     * In case the Movies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MoviesUpdateInput, MoviesUncheckedUpdateInput>
  }

  /**
   * Movies delete
   */
  export type MoviesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter which Movies to delete.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies deleteMany
   */
  export type MoviesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movies to delete
     */
    where?: MoviesWhereInput
  }

  /**
   * Movies.schedules
   */
  export type Movies$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    where?: MovieSchedulesWhereInput
    orderBy?: MovieSchedulesOrderByWithRelationInput | MovieSchedulesOrderByWithRelationInput[]
    cursor?: MovieSchedulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieSchedulesScalarFieldEnum | MovieSchedulesScalarFieldEnum[]
  }

  /**
   * Movies.theaters
   */
  export type Movies$theatersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theaters
     */
    select?: TheatersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theaters
     */
    omit?: TheatersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheatersInclude<ExtArgs> | null
    where?: TheatersWhereInput
    orderBy?: TheatersOrderByWithRelationInput | TheatersOrderByWithRelationInput[]
    cursor?: TheatersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TheatersScalarFieldEnum | TheatersScalarFieldEnum[]
  }

  /**
   * Movies without action
   */
  export type MoviesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Movies
     */
    omit?: MoviesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
  }


  /**
   * Model MovieSchedules
   */

  export type AggregateMovieSchedules = {
    _count: MovieSchedulesCountAggregateOutputType | null
    _avg: MovieSchedulesAvgAggregateOutputType | null
    _sum: MovieSchedulesSumAggregateOutputType | null
    _min: MovieSchedulesMinAggregateOutputType | null
    _max: MovieSchedulesMaxAggregateOutputType | null
  }

  export type MovieSchedulesAvgAggregateOutputType = {
    scheduleId: number | null
    movieID: number | null
  }

  export type MovieSchedulesSumAggregateOutputType = {
    scheduleId: number | null
    movieID: number | null
  }

  export type MovieSchedulesMinAggregateOutputType = {
    scheduleId: number | null
    startTime: Date | null
    endTime: Date | null
    movieID: number | null
  }

  export type MovieSchedulesMaxAggregateOutputType = {
    scheduleId: number | null
    startTime: Date | null
    endTime: Date | null
    movieID: number | null
  }

  export type MovieSchedulesCountAggregateOutputType = {
    scheduleId: number
    startTime: number
    endTime: number
    movieID: number
    _all: number
  }


  export type MovieSchedulesAvgAggregateInputType = {
    scheduleId?: true
    movieID?: true
  }

  export type MovieSchedulesSumAggregateInputType = {
    scheduleId?: true
    movieID?: true
  }

  export type MovieSchedulesMinAggregateInputType = {
    scheduleId?: true
    startTime?: true
    endTime?: true
    movieID?: true
  }

  export type MovieSchedulesMaxAggregateInputType = {
    scheduleId?: true
    startTime?: true
    endTime?: true
    movieID?: true
  }

  export type MovieSchedulesCountAggregateInputType = {
    scheduleId?: true
    startTime?: true
    endTime?: true
    movieID?: true
    _all?: true
  }

  export type MovieSchedulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieSchedules to aggregate.
     */
    where?: MovieSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieSchedules to fetch.
     */
    orderBy?: MovieSchedulesOrderByWithRelationInput | MovieSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovieSchedules
    **/
    _count?: true | MovieSchedulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieSchedulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieSchedulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieSchedulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieSchedulesMaxAggregateInputType
  }

  export type GetMovieSchedulesAggregateType<T extends MovieSchedulesAggregateArgs> = {
        [P in keyof T & keyof AggregateMovieSchedules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovieSchedules[P]>
      : GetScalarType<T[P], AggregateMovieSchedules[P]>
  }




  export type MovieSchedulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieSchedulesWhereInput
    orderBy?: MovieSchedulesOrderByWithAggregationInput | MovieSchedulesOrderByWithAggregationInput[]
    by: MovieSchedulesScalarFieldEnum[] | MovieSchedulesScalarFieldEnum
    having?: MovieSchedulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieSchedulesCountAggregateInputType | true
    _avg?: MovieSchedulesAvgAggregateInputType
    _sum?: MovieSchedulesSumAggregateInputType
    _min?: MovieSchedulesMinAggregateInputType
    _max?: MovieSchedulesMaxAggregateInputType
  }

  export type MovieSchedulesGroupByOutputType = {
    scheduleId: number
    startTime: Date
    endTime: Date
    movieID: number
    _count: MovieSchedulesCountAggregateOutputType | null
    _avg: MovieSchedulesAvgAggregateOutputType | null
    _sum: MovieSchedulesSumAggregateOutputType | null
    _min: MovieSchedulesMinAggregateOutputType | null
    _max: MovieSchedulesMaxAggregateOutputType | null
  }

  type GetMovieSchedulesGroupByPayload<T extends MovieSchedulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieSchedulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieSchedulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieSchedulesGroupByOutputType[P]>
            : GetScalarType<T[P], MovieSchedulesGroupByOutputType[P]>
        }
      >
    >


  export type MovieSchedulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    scheduleId?: boolean
    startTime?: boolean
    endTime?: boolean
    movieID?: boolean
    movie?: boolean | MoviesDefaultArgs<ExtArgs>
    tickets?: boolean | MovieSchedules$ticketsArgs<ExtArgs>
    _count?: boolean | MovieSchedulesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieSchedules"]>

  export type MovieSchedulesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    scheduleId?: boolean
    startTime?: boolean
    endTime?: boolean
    movieID?: boolean
    movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieSchedules"]>

  export type MovieSchedulesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    scheduleId?: boolean
    startTime?: boolean
    endTime?: boolean
    movieID?: boolean
    movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieSchedules"]>

  export type MovieSchedulesSelectScalar = {
    scheduleId?: boolean
    startTime?: boolean
    endTime?: boolean
    movieID?: boolean
  }

  export type MovieSchedulesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"scheduleId" | "startTime" | "endTime" | "movieID", ExtArgs["result"]["movieSchedules"]>
  export type MovieSchedulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movie?: boolean | MoviesDefaultArgs<ExtArgs>
    tickets?: boolean | MovieSchedules$ticketsArgs<ExtArgs>
    _count?: boolean | MovieSchedulesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MovieSchedulesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }
  export type MovieSchedulesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }

  export type $MovieSchedulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovieSchedules"
    objects: {
      movie: Prisma.$MoviesPayload<ExtArgs>
      tickets: Prisma.$TicketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      scheduleId: number
      startTime: Date
      endTime: Date
      movieID: number
    }, ExtArgs["result"]["movieSchedules"]>
    composites: {}
  }

  type MovieSchedulesGetPayload<S extends boolean | null | undefined | MovieSchedulesDefaultArgs> = $Result.GetResult<Prisma.$MovieSchedulesPayload, S>

  type MovieSchedulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MovieSchedulesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MovieSchedulesCountAggregateInputType | true
    }

  export interface MovieSchedulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovieSchedules'], meta: { name: 'MovieSchedules' } }
    /**
     * Find zero or one MovieSchedules that matches the filter.
     * @param {MovieSchedulesFindUniqueArgs} args - Arguments to find a MovieSchedules
     * @example
     * // Get one MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovieSchedulesFindUniqueArgs>(args: SelectSubset<T, MovieSchedulesFindUniqueArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one MovieSchedules that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MovieSchedulesFindUniqueOrThrowArgs} args - Arguments to find a MovieSchedules
     * @example
     * // Get one MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovieSchedulesFindUniqueOrThrowArgs>(args: SelectSubset<T, MovieSchedulesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first MovieSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesFindFirstArgs} args - Arguments to find a MovieSchedules
     * @example
     * // Get one MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovieSchedulesFindFirstArgs>(args?: SelectSubset<T, MovieSchedulesFindFirstArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first MovieSchedules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesFindFirstOrThrowArgs} args - Arguments to find a MovieSchedules
     * @example
     * // Get one MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovieSchedulesFindFirstOrThrowArgs>(args?: SelectSubset<T, MovieSchedulesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more MovieSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.findMany()
     * 
     * // Get first 10 MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.findMany({ take: 10 })
     * 
     * // Only select the `scheduleId`
     * const movieSchedulesWithScheduleIdOnly = await prisma.movieSchedules.findMany({ select: { scheduleId: true } })
     * 
     */
    findMany<T extends MovieSchedulesFindManyArgs>(args?: SelectSubset<T, MovieSchedulesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a MovieSchedules.
     * @param {MovieSchedulesCreateArgs} args - Arguments to create a MovieSchedules.
     * @example
     * // Create one MovieSchedules
     * const MovieSchedules = await prisma.movieSchedules.create({
     *   data: {
     *     // ... data to create a MovieSchedules
     *   }
     * })
     * 
     */
    create<T extends MovieSchedulesCreateArgs>(args: SelectSubset<T, MovieSchedulesCreateArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many MovieSchedules.
     * @param {MovieSchedulesCreateManyArgs} args - Arguments to create many MovieSchedules.
     * @example
     * // Create many MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovieSchedulesCreateManyArgs>(args?: SelectSubset<T, MovieSchedulesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovieSchedules and returns the data saved in the database.
     * @param {MovieSchedulesCreateManyAndReturnArgs} args - Arguments to create many MovieSchedules.
     * @example
     * // Create many MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovieSchedules and only return the `scheduleId`
     * const movieSchedulesWithScheduleIdOnly = await prisma.movieSchedules.createManyAndReturn({
     *   select: { scheduleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovieSchedulesCreateManyAndReturnArgs>(args?: SelectSubset<T, MovieSchedulesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a MovieSchedules.
     * @param {MovieSchedulesDeleteArgs} args - Arguments to delete one MovieSchedules.
     * @example
     * // Delete one MovieSchedules
     * const MovieSchedules = await prisma.movieSchedules.delete({
     *   where: {
     *     // ... filter to delete one MovieSchedules
     *   }
     * })
     * 
     */
    delete<T extends MovieSchedulesDeleteArgs>(args: SelectSubset<T, MovieSchedulesDeleteArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one MovieSchedules.
     * @param {MovieSchedulesUpdateArgs} args - Arguments to update one MovieSchedules.
     * @example
     * // Update one MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovieSchedulesUpdateArgs>(args: SelectSubset<T, MovieSchedulesUpdateArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more MovieSchedules.
     * @param {MovieSchedulesDeleteManyArgs} args - Arguments to filter MovieSchedules to delete.
     * @example
     * // Delete a few MovieSchedules
     * const { count } = await prisma.movieSchedules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovieSchedulesDeleteManyArgs>(args?: SelectSubset<T, MovieSchedulesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovieSchedulesUpdateManyArgs>(args: SelectSubset<T, MovieSchedulesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieSchedules and returns the data updated in the database.
     * @param {MovieSchedulesUpdateManyAndReturnArgs} args - Arguments to update many MovieSchedules.
     * @example
     * // Update many MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MovieSchedules and only return the `scheduleId`
     * const movieSchedulesWithScheduleIdOnly = await prisma.movieSchedules.updateManyAndReturn({
     *   select: { scheduleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MovieSchedulesUpdateManyAndReturnArgs>(args: SelectSubset<T, MovieSchedulesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one MovieSchedules.
     * @param {MovieSchedulesUpsertArgs} args - Arguments to update or create a MovieSchedules.
     * @example
     * // Update or create a MovieSchedules
     * const movieSchedules = await prisma.movieSchedules.upsert({
     *   create: {
     *     // ... data to create a MovieSchedules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovieSchedules we want to update
     *   }
     * })
     */
    upsert<T extends MovieSchedulesUpsertArgs>(args: SelectSubset<T, MovieSchedulesUpsertArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of MovieSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesCountArgs} args - Arguments to filter MovieSchedules to count.
     * @example
     * // Count the number of MovieSchedules
     * const count = await prisma.movieSchedules.count({
     *   where: {
     *     // ... the filter for the MovieSchedules we want to count
     *   }
     * })
    **/
    count<T extends MovieSchedulesCountArgs>(
      args?: Subset<T, MovieSchedulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieSchedulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovieSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieSchedulesAggregateArgs>(args: Subset<T, MovieSchedulesAggregateArgs>): Prisma.PrismaPromise<GetMovieSchedulesAggregateType<T>>

    /**
     * Group by MovieSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieSchedulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieSchedulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieSchedulesGroupByArgs['orderBy'] }
        : { orderBy?: MovieSchedulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieSchedulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieSchedulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovieSchedules model
   */
  readonly fields: MovieSchedulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovieSchedules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieSchedulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    movie<T extends MoviesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MoviesDefaultArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    tickets<T extends MovieSchedules$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, MovieSchedules$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovieSchedules model
   */ 
  interface MovieSchedulesFieldRefs {
    readonly scheduleId: FieldRef<"MovieSchedules", 'Int'>
    readonly startTime: FieldRef<"MovieSchedules", 'DateTime'>
    readonly endTime: FieldRef<"MovieSchedules", 'DateTime'>
    readonly movieID: FieldRef<"MovieSchedules", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MovieSchedules findUnique
   */
  export type MovieSchedulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which MovieSchedules to fetch.
     */
    where: MovieSchedulesWhereUniqueInput
  }

  /**
   * MovieSchedules findUniqueOrThrow
   */
  export type MovieSchedulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which MovieSchedules to fetch.
     */
    where: MovieSchedulesWhereUniqueInput
  }

  /**
   * MovieSchedules findFirst
   */
  export type MovieSchedulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which MovieSchedules to fetch.
     */
    where?: MovieSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieSchedules to fetch.
     */
    orderBy?: MovieSchedulesOrderByWithRelationInput | MovieSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieSchedules.
     */
    cursor?: MovieSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieSchedules.
     */
    distinct?: MovieSchedulesScalarFieldEnum | MovieSchedulesScalarFieldEnum[]
  }

  /**
   * MovieSchedules findFirstOrThrow
   */
  export type MovieSchedulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which MovieSchedules to fetch.
     */
    where?: MovieSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieSchedules to fetch.
     */
    orderBy?: MovieSchedulesOrderByWithRelationInput | MovieSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieSchedules.
     */
    cursor?: MovieSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieSchedules.
     */
    distinct?: MovieSchedulesScalarFieldEnum | MovieSchedulesScalarFieldEnum[]
  }

  /**
   * MovieSchedules findMany
   */
  export type MovieSchedulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * Filter, which MovieSchedules to fetch.
     */
    where?: MovieSchedulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieSchedules to fetch.
     */
    orderBy?: MovieSchedulesOrderByWithRelationInput | MovieSchedulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovieSchedules.
     */
    cursor?: MovieSchedulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieSchedules.
     */
    skip?: number
    distinct?: MovieSchedulesScalarFieldEnum | MovieSchedulesScalarFieldEnum[]
  }

  /**
   * MovieSchedules create
   */
  export type MovieSchedulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * The data needed to create a MovieSchedules.
     */
    data: XOR<MovieSchedulesCreateInput, MovieSchedulesUncheckedCreateInput>
  }

  /**
   * MovieSchedules createMany
   */
  export type MovieSchedulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovieSchedules.
     */
    data: MovieSchedulesCreateManyInput | MovieSchedulesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieSchedules createManyAndReturn
   */
  export type MovieSchedulesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * The data used to create many MovieSchedules.
     */
    data: MovieSchedulesCreateManyInput | MovieSchedulesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovieSchedules update
   */
  export type MovieSchedulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * The data needed to update a MovieSchedules.
     */
    data: XOR<MovieSchedulesUpdateInput, MovieSchedulesUncheckedUpdateInput>
    /**
     * Choose, which MovieSchedules to update.
     */
    where: MovieSchedulesWhereUniqueInput
  }

  /**
   * MovieSchedules updateMany
   */
  export type MovieSchedulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovieSchedules.
     */
    data: XOR<MovieSchedulesUpdateManyMutationInput, MovieSchedulesUncheckedUpdateManyInput>
    /**
     * Filter which MovieSchedules to update
     */
    where?: MovieSchedulesWhereInput
  }

  /**
   * MovieSchedules updateManyAndReturn
   */
  export type MovieSchedulesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * The data used to update MovieSchedules.
     */
    data: XOR<MovieSchedulesUpdateManyMutationInput, MovieSchedulesUncheckedUpdateManyInput>
    /**
     * Filter which MovieSchedules to update
     */
    where?: MovieSchedulesWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovieSchedules upsert
   */
  export type MovieSchedulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * The filter to search for the MovieSchedules to update in case it exists.
     */
    where: MovieSchedulesWhereUniqueInput
    /**
     * In case the MovieSchedules found by the `where` argument doesn't exist, create a new MovieSchedules with this data.
     */
    create: XOR<MovieSchedulesCreateInput, MovieSchedulesUncheckedCreateInput>
    /**
     * In case the MovieSchedules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieSchedulesUpdateInput, MovieSchedulesUncheckedUpdateInput>
  }

  /**
   * MovieSchedules delete
   */
  export type MovieSchedulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
    /**
     * Filter which MovieSchedules to delete.
     */
    where: MovieSchedulesWhereUniqueInput
  }

  /**
   * MovieSchedules deleteMany
   */
  export type MovieSchedulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieSchedules to delete
     */
    where?: MovieSchedulesWhereInput
  }

  /**
   * MovieSchedules.tickets
   */
  export type MovieSchedules$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * MovieSchedules without action
   */
  export type MovieSchedulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieSchedules
     */
    select?: MovieSchedulesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MovieSchedules
     */
    omit?: MovieSchedulesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieSchedulesInclude<ExtArgs> | null
  }


  /**
   * Model Tickets
   */

  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsAvgAggregateOutputType = {
    ticketId: number | null
    price: Decimal | null
    scheduleID: number | null
    userID: number | null
    stripeID: number | null
  }

  export type TicketsSumAggregateOutputType = {
    ticketId: number | null
    price: Decimal | null
    scheduleID: number | null
    userID: number | null
    stripeID: number | null
  }

  export type TicketsMinAggregateOutputType = {
    ticketId: number | null
    ticketNumber: string | null
    price: Decimal | null
    scheduleID: number | null
    userID: number | null
    stripeID: number | null
  }

  export type TicketsMaxAggregateOutputType = {
    ticketId: number | null
    ticketNumber: string | null
    price: Decimal | null
    scheduleID: number | null
    userID: number | null
    stripeID: number | null
  }

  export type TicketsCountAggregateOutputType = {
    ticketId: number
    ticketNumber: number
    price: number
    scheduleID: number
    userID: number
    stripeID: number
    _all: number
  }


  export type TicketsAvgAggregateInputType = {
    ticketId?: true
    price?: true
    scheduleID?: true
    userID?: true
    stripeID?: true
  }

  export type TicketsSumAggregateInputType = {
    ticketId?: true
    price?: true
    scheduleID?: true
    userID?: true
    stripeID?: true
  }

  export type TicketsMinAggregateInputType = {
    ticketId?: true
    ticketNumber?: true
    price?: true
    scheduleID?: true
    userID?: true
    stripeID?: true
  }

  export type TicketsMaxAggregateInputType = {
    ticketId?: true
    ticketNumber?: true
    price?: true
    scheduleID?: true
    userID?: true
    stripeID?: true
  }

  export type TicketsCountAggregateInputType = {
    ticketId?: true
    ticketNumber?: true
    price?: true
    scheduleID?: true
    userID?: true
    stripeID?: true
    _all?: true
  }

  export type TicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to aggregate.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type TicketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithAggregationInput | TicketsOrderByWithAggregationInput[]
    by: TicketsScalarFieldEnum[] | TicketsScalarFieldEnum
    having?: TicketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _avg?: TicketsAvgAggregateInputType
    _sum?: TicketsSumAggregateInputType
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }

  export type TicketsGroupByOutputType = {
    ticketId: number
    ticketNumber: string
    price: Decimal
    scheduleID: number
    userID: number
    stripeID: number
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends TicketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type TicketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticketId?: boolean
    ticketNumber?: boolean
    price?: boolean
    scheduleID?: boolean
    userID?: boolean
    stripeID?: boolean
    schedule?: boolean | MovieSchedulesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    stripe?: boolean | StripeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type TicketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticketId?: boolean
    ticketNumber?: boolean
    price?: boolean
    scheduleID?: boolean
    userID?: boolean
    stripeID?: boolean
    schedule?: boolean | MovieSchedulesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    stripe?: boolean | StripeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type TicketsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ticketId?: boolean
    ticketNumber?: boolean
    price?: boolean
    scheduleID?: boolean
    userID?: boolean
    stripeID?: boolean
    schedule?: boolean | MovieSchedulesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    stripe?: boolean | StripeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type TicketsSelectScalar = {
    ticketId?: boolean
    ticketNumber?: boolean
    price?: boolean
    scheduleID?: boolean
    userID?: boolean
    stripeID?: boolean
  }

  export type TicketsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ticketId" | "ticketNumber" | "price" | "scheduleID" | "userID" | "stripeID", ExtArgs["result"]["tickets"]>
  export type TicketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | MovieSchedulesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    stripe?: boolean | StripeDefaultArgs<ExtArgs>
  }
  export type TicketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | MovieSchedulesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    stripe?: boolean | StripeDefaultArgs<ExtArgs>
  }
  export type TicketsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | MovieSchedulesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    stripe?: boolean | StripeDefaultArgs<ExtArgs>
  }

  export type $TicketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tickets"
    objects: {
      schedule: Prisma.$MovieSchedulesPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      stripe: Prisma.$StripePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ticketId: number
      ticketNumber: string
      price: Prisma.Decimal
      scheduleID: number
      userID: number
      stripeID: number
    }, ExtArgs["result"]["tickets"]>
    composites: {}
  }

  type TicketsGetPayload<S extends boolean | null | undefined | TicketsDefaultArgs> = $Result.GetResult<Prisma.$TicketsPayload, S>

  type TicketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TicketsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface TicketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tickets'], meta: { name: 'Tickets' } }
    /**
     * Find zero or one Tickets that matches the filter.
     * @param {TicketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketsFindUniqueArgs>(args: SelectSubset<T, TicketsFindUniqueArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Tickets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TicketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketsFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketsFindFirstArgs>(args?: SelectSubset<T, TicketsFindFirstArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketsFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `ticketId`
     * const ticketsWithTicketIdOnly = await prisma.tickets.findMany({ select: { ticketId: true } })
     * 
     */
    findMany<T extends TicketsFindManyArgs>(args?: SelectSubset<T, TicketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Tickets.
     * @param {TicketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
     */
    create<T extends TicketsCreateArgs>(args: SelectSubset<T, TicketsCreateArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tickets.
     * @param {TicketsCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketsCreateManyArgs>(args?: SelectSubset<T, TicketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {TicketsCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `ticketId`
     * const ticketsWithTicketIdOnly = await prisma.tickets.createManyAndReturn({
     *   select: { ticketId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketsCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Tickets.
     * @param {TicketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
     */
    delete<T extends TicketsDeleteArgs>(args: SelectSubset<T, TicketsDeleteArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Tickets.
     * @param {TicketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketsUpdateArgs>(args: SelectSubset<T, TicketsUpdateArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tickets.
     * @param {TicketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketsDeleteManyArgs>(args?: SelectSubset<T, TicketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketsUpdateManyArgs>(args: SelectSubset<T, TicketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets and returns the data updated in the database.
     * @param {TicketsUpdateManyAndReturnArgs} args - Arguments to update many Tickets.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tickets and only return the `ticketId`
     * const ticketsWithTicketIdOnly = await prisma.tickets.updateManyAndReturn({
     *   select: { ticketId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TicketsUpdateManyAndReturnArgs>(args: SelectSubset<T, TicketsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Tickets.
     * @param {TicketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
     */
    upsert<T extends TicketsUpsertArgs>(args: SelectSubset<T, TicketsUpsertArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketsCountArgs>(
      args?: Subset<T, TicketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketsGroupByArgs['orderBy'] }
        : { orderBy?: TicketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tickets model
   */
  readonly fields: TicketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedule<T extends MovieSchedulesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MovieSchedulesDefaultArgs<ExtArgs>>): Prisma__MovieSchedulesClient<$Result.GetResult<Prisma.$MovieSchedulesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    stripe<T extends StripeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StripeDefaultArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tickets model
   */ 
  interface TicketsFieldRefs {
    readonly ticketId: FieldRef<"Tickets", 'Int'>
    readonly ticketNumber: FieldRef<"Tickets", 'String'>
    readonly price: FieldRef<"Tickets", 'Decimal'>
    readonly scheduleID: FieldRef<"Tickets", 'Int'>
    readonly userID: FieldRef<"Tickets", 'Int'>
    readonly stripeID: FieldRef<"Tickets", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tickets findUnique
   */
  export type TicketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findUniqueOrThrow
   */
  export type TicketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findFirst
   */
  export type TicketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets findFirstOrThrow
   */
  export type TicketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets findMany
   */
  export type TicketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets create
   */
  export type TicketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tickets.
     */
    data: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
  }

  /**
   * Tickets createMany
   */
  export type TicketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketsCreateManyInput | TicketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tickets createManyAndReturn
   */
  export type TicketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * The data used to create many Tickets.
     */
    data: TicketsCreateManyInput | TicketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tickets update
   */
  export type TicketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tickets.
     */
    data: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
    /**
     * Choose, which Tickets to update.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets updateMany
   */
  export type TicketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketsWhereInput
  }

  /**
   * Tickets updateManyAndReturn
   */
  export type TicketsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tickets upsert
   */
  export type TicketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tickets to update in case it exists.
     */
    where: TicketsWhereUniqueInput
    /**
     * In case the Tickets found by the `where` argument doesn't exist, create a new Tickets with this data.
     */
    create: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
    /**
     * In case the Tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
  }

  /**
   * Tickets delete
   */
  export type TicketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter which Tickets to delete.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets deleteMany
   */
  export type TicketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketsWhereInput
  }

  /**
   * Tickets without action
   */
  export type TicketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
  }


  /**
   * Model Stripe
   */

  export type AggregateStripe = {
    _count: StripeCountAggregateOutputType | null
    _avg: StripeAvgAggregateOutputType | null
    _sum: StripeSumAggregateOutputType | null
    _min: StripeMinAggregateOutputType | null
    _max: StripeMaxAggregateOutputType | null
  }

  export type StripeAvgAggregateOutputType = {
    stripeId: number | null
  }

  export type StripeSumAggregateOutputType = {
    stripeId: number | null
  }

  export type StripeMinAggregateOutputType = {
    stripeId: number | null
    customerID: string | null
    paymentMethodID: string | null
  }

  export type StripeMaxAggregateOutputType = {
    stripeId: number | null
    customerID: string | null
    paymentMethodID: string | null
  }

  export type StripeCountAggregateOutputType = {
    stripeId: number
    customerID: number
    paymentMethodID: number
    _all: number
  }


  export type StripeAvgAggregateInputType = {
    stripeId?: true
  }

  export type StripeSumAggregateInputType = {
    stripeId?: true
  }

  export type StripeMinAggregateInputType = {
    stripeId?: true
    customerID?: true
    paymentMethodID?: true
  }

  export type StripeMaxAggregateInputType = {
    stripeId?: true
    customerID?: true
    paymentMethodID?: true
  }

  export type StripeCountAggregateInputType = {
    stripeId?: true
    customerID?: true
    paymentMethodID?: true
    _all?: true
  }

  export type StripeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stripe to aggregate.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stripes
    **/
    _count?: true | StripeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StripeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StripeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StripeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StripeMaxAggregateInputType
  }

  export type GetStripeAggregateType<T extends StripeAggregateArgs> = {
        [P in keyof T & keyof AggregateStripe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStripe[P]>
      : GetScalarType<T[P], AggregateStripe[P]>
  }




  export type StripeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StripeWhereInput
    orderBy?: StripeOrderByWithAggregationInput | StripeOrderByWithAggregationInput[]
    by: StripeScalarFieldEnum[] | StripeScalarFieldEnum
    having?: StripeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StripeCountAggregateInputType | true
    _avg?: StripeAvgAggregateInputType
    _sum?: StripeSumAggregateInputType
    _min?: StripeMinAggregateInputType
    _max?: StripeMaxAggregateInputType
  }

  export type StripeGroupByOutputType = {
    stripeId: number
    customerID: string
    paymentMethodID: string
    _count: StripeCountAggregateOutputType | null
    _avg: StripeAvgAggregateOutputType | null
    _sum: StripeSumAggregateOutputType | null
    _min: StripeMinAggregateOutputType | null
    _max: StripeMaxAggregateOutputType | null
  }

  type GetStripeGroupByPayload<T extends StripeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StripeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StripeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StripeGroupByOutputType[P]>
            : GetScalarType<T[P], StripeGroupByOutputType[P]>
        }
      >
    >


  export type StripeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stripeId?: boolean
    customerID?: boolean
    paymentMethodID?: boolean
    tickets?: boolean | Stripe$ticketsArgs<ExtArgs>
    _count?: boolean | StripeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stripe"]>

  export type StripeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stripeId?: boolean
    customerID?: boolean
    paymentMethodID?: boolean
  }, ExtArgs["result"]["stripe"]>

  export type StripeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stripeId?: boolean
    customerID?: boolean
    paymentMethodID?: boolean
  }, ExtArgs["result"]["stripe"]>

  export type StripeSelectScalar = {
    stripeId?: boolean
    customerID?: boolean
    paymentMethodID?: boolean
  }

  export type StripeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"stripeId" | "customerID" | "paymentMethodID", ExtArgs["result"]["stripe"]>
  export type StripeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Stripe$ticketsArgs<ExtArgs>
    _count?: boolean | StripeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StripeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StripeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StripePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stripe"
    objects: {
      tickets: Prisma.$TicketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      stripeId: number
      customerID: string
      paymentMethodID: string
    }, ExtArgs["result"]["stripe"]>
    composites: {}
  }

  type StripeGetPayload<S extends boolean | null | undefined | StripeDefaultArgs> = $Result.GetResult<Prisma.$StripePayload, S>

  type StripeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StripeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StripeCountAggregateInputType | true
    }

  export interface StripeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stripe'], meta: { name: 'Stripe' } }
    /**
     * Find zero or one Stripe that matches the filter.
     * @param {StripeFindUniqueArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StripeFindUniqueArgs>(args: SelectSubset<T, StripeFindUniqueArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Stripe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StripeFindUniqueOrThrowArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StripeFindUniqueOrThrowArgs>(args: SelectSubset<T, StripeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Stripe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeFindFirstArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StripeFindFirstArgs>(args?: SelectSubset<T, StripeFindFirstArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Stripe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeFindFirstOrThrowArgs} args - Arguments to find a Stripe
     * @example
     * // Get one Stripe
     * const stripe = await prisma.stripe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StripeFindFirstOrThrowArgs>(args?: SelectSubset<T, StripeFindFirstOrThrowArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Stripes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stripes
     * const stripes = await prisma.stripe.findMany()
     * 
     * // Get first 10 Stripes
     * const stripes = await prisma.stripe.findMany({ take: 10 })
     * 
     * // Only select the `stripeId`
     * const stripeWithStripeIdOnly = await prisma.stripe.findMany({ select: { stripeId: true } })
     * 
     */
    findMany<T extends StripeFindManyArgs>(args?: SelectSubset<T, StripeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Stripe.
     * @param {StripeCreateArgs} args - Arguments to create a Stripe.
     * @example
     * // Create one Stripe
     * const Stripe = await prisma.stripe.create({
     *   data: {
     *     // ... data to create a Stripe
     *   }
     * })
     * 
     */
    create<T extends StripeCreateArgs>(args: SelectSubset<T, StripeCreateArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Stripes.
     * @param {StripeCreateManyArgs} args - Arguments to create many Stripes.
     * @example
     * // Create many Stripes
     * const stripe = await prisma.stripe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StripeCreateManyArgs>(args?: SelectSubset<T, StripeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stripes and returns the data saved in the database.
     * @param {StripeCreateManyAndReturnArgs} args - Arguments to create many Stripes.
     * @example
     * // Create many Stripes
     * const stripe = await prisma.stripe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stripes and only return the `stripeId`
     * const stripeWithStripeIdOnly = await prisma.stripe.createManyAndReturn({
     *   select: { stripeId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StripeCreateManyAndReturnArgs>(args?: SelectSubset<T, StripeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Stripe.
     * @param {StripeDeleteArgs} args - Arguments to delete one Stripe.
     * @example
     * // Delete one Stripe
     * const Stripe = await prisma.stripe.delete({
     *   where: {
     *     // ... filter to delete one Stripe
     *   }
     * })
     * 
     */
    delete<T extends StripeDeleteArgs>(args: SelectSubset<T, StripeDeleteArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Stripe.
     * @param {StripeUpdateArgs} args - Arguments to update one Stripe.
     * @example
     * // Update one Stripe
     * const stripe = await prisma.stripe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StripeUpdateArgs>(args: SelectSubset<T, StripeUpdateArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Stripes.
     * @param {StripeDeleteManyArgs} args - Arguments to filter Stripes to delete.
     * @example
     * // Delete a few Stripes
     * const { count } = await prisma.stripe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StripeDeleteManyArgs>(args?: SelectSubset<T, StripeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stripes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stripes
     * const stripe = await prisma.stripe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StripeUpdateManyArgs>(args: SelectSubset<T, StripeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stripes and returns the data updated in the database.
     * @param {StripeUpdateManyAndReturnArgs} args - Arguments to update many Stripes.
     * @example
     * // Update many Stripes
     * const stripe = await prisma.stripe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stripes and only return the `stripeId`
     * const stripeWithStripeIdOnly = await prisma.stripe.updateManyAndReturn({
     *   select: { stripeId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StripeUpdateManyAndReturnArgs>(args: SelectSubset<T, StripeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Stripe.
     * @param {StripeUpsertArgs} args - Arguments to update or create a Stripe.
     * @example
     * // Update or create a Stripe
     * const stripe = await prisma.stripe.upsert({
     *   create: {
     *     // ... data to create a Stripe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stripe we want to update
     *   }
     * })
     */
    upsert<T extends StripeUpsertArgs>(args: SelectSubset<T, StripeUpsertArgs<ExtArgs>>): Prisma__StripeClient<$Result.GetResult<Prisma.$StripePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Stripes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeCountArgs} args - Arguments to filter Stripes to count.
     * @example
     * // Count the number of Stripes
     * const count = await prisma.stripe.count({
     *   where: {
     *     // ... the filter for the Stripes we want to count
     *   }
     * })
    **/
    count<T extends StripeCountArgs>(
      args?: Subset<T, StripeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StripeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stripe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StripeAggregateArgs>(args: Subset<T, StripeAggregateArgs>): Prisma.PrismaPromise<GetStripeAggregateType<T>>

    /**
     * Group by Stripe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StripeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StripeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StripeGroupByArgs['orderBy'] }
        : { orderBy?: StripeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StripeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stripe model
   */
  readonly fields: StripeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stripe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StripeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Stripe$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Stripe$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stripe model
   */ 
  interface StripeFieldRefs {
    readonly stripeId: FieldRef<"Stripe", 'Int'>
    readonly customerID: FieldRef<"Stripe", 'String'>
    readonly paymentMethodID: FieldRef<"Stripe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Stripe findUnique
   */
  export type StripeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe findUniqueOrThrow
   */
  export type StripeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe findFirst
   */
  export type StripeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stripes.
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stripes.
     */
    distinct?: StripeScalarFieldEnum | StripeScalarFieldEnum[]
  }

  /**
   * Stripe findFirstOrThrow
   */
  export type StripeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * Filter, which Stripe to fetch.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stripes.
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stripes.
     */
    distinct?: StripeScalarFieldEnum | StripeScalarFieldEnum[]
  }

  /**
   * Stripe findMany
   */
  export type StripeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * Filter, which Stripes to fetch.
     */
    where?: StripeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stripes to fetch.
     */
    orderBy?: StripeOrderByWithRelationInput | StripeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stripes.
     */
    cursor?: StripeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stripes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stripes.
     */
    skip?: number
    distinct?: StripeScalarFieldEnum | StripeScalarFieldEnum[]
  }

  /**
   * Stripe create
   */
  export type StripeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * The data needed to create a Stripe.
     */
    data: XOR<StripeCreateInput, StripeUncheckedCreateInput>
  }

  /**
   * Stripe createMany
   */
  export type StripeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stripes.
     */
    data: StripeCreateManyInput | StripeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stripe createManyAndReturn
   */
  export type StripeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The data used to create many Stripes.
     */
    data: StripeCreateManyInput | StripeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stripe update
   */
  export type StripeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * The data needed to update a Stripe.
     */
    data: XOR<StripeUpdateInput, StripeUncheckedUpdateInput>
    /**
     * Choose, which Stripe to update.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe updateMany
   */
  export type StripeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stripes.
     */
    data: XOR<StripeUpdateManyMutationInput, StripeUncheckedUpdateManyInput>
    /**
     * Filter which Stripes to update
     */
    where?: StripeWhereInput
  }

  /**
   * Stripe updateManyAndReturn
   */
  export type StripeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * The data used to update Stripes.
     */
    data: XOR<StripeUpdateManyMutationInput, StripeUncheckedUpdateManyInput>
    /**
     * Filter which Stripes to update
     */
    where?: StripeWhereInput
  }

  /**
   * Stripe upsert
   */
  export type StripeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * The filter to search for the Stripe to update in case it exists.
     */
    where: StripeWhereUniqueInput
    /**
     * In case the Stripe found by the `where` argument doesn't exist, create a new Stripe with this data.
     */
    create: XOR<StripeCreateInput, StripeUncheckedCreateInput>
    /**
     * In case the Stripe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StripeUpdateInput, StripeUncheckedUpdateInput>
  }

  /**
   * Stripe delete
   */
  export type StripeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
    /**
     * Filter which Stripe to delete.
     */
    where: StripeWhereUniqueInput
  }

  /**
   * Stripe deleteMany
   */
  export type StripeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stripes to delete
     */
    where?: StripeWhereInput
  }

  /**
   * Stripe.tickets
   */
  export type Stripe$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tickets
     */
    omit?: TicketsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Stripe without action
   */
  export type StripeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stripe
     */
    select?: StripeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stripe
     */
    omit?: StripeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StripeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    adminId: 'adminId',
    username: 'username',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    email: 'email',
    password: 'password',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TheatersScalarFieldEnum: {
    theatherId: 'theatherId',
    name: 'name',
    location: 'location'
  };

  export type TheatersScalarFieldEnum = (typeof TheatersScalarFieldEnum)[keyof typeof TheatersScalarFieldEnum]


  export const SeatsScalarFieldEnum: {
    seatId: 'seatId',
    seatNumber: 'seatNumber',
    seatType: 'seatType',
    theaterID: 'theaterID'
  };

  export type SeatsScalarFieldEnum = (typeof SeatsScalarFieldEnum)[keyof typeof SeatsScalarFieldEnum]


  export const MoviesScalarFieldEnum: {
    movieId: 'movieId',
    title: 'title',
    description: 'description',
    duration: 'duration',
    releaseDate: 'releaseDate'
  };

  export type MoviesScalarFieldEnum = (typeof MoviesScalarFieldEnum)[keyof typeof MoviesScalarFieldEnum]


  export const MovieSchedulesScalarFieldEnum: {
    scheduleId: 'scheduleId',
    startTime: 'startTime',
    endTime: 'endTime',
    movieID: 'movieID'
  };

  export type MovieSchedulesScalarFieldEnum = (typeof MovieSchedulesScalarFieldEnum)[keyof typeof MovieSchedulesScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    ticketId: 'ticketId',
    ticketNumber: 'ticketNumber',
    price: 'price',
    scheduleID: 'scheduleID',
    userID: 'userID',
    stripeID: 'stripeID'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const StripeScalarFieldEnum: {
    stripeId: 'stripeId',
    customerID: 'customerID',
    paymentMethodID: 'paymentMethodID'
  };

  export type StripeScalarFieldEnum = (typeof StripeScalarFieldEnum)[keyof typeof StripeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'AdminRole'
   */
  export type EnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole'>
    


  /**
   * Reference to a field of type 'AdminRole[]'
   */
  export type ListEnumAdminRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    adminId?: IntFilter<"Admin"> | number
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    role?: EnumAdminRoleFilter<"Admin"> | $Enums.AdminRole
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    adminId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    adminId?: number
    username?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
    role?: EnumAdminRoleFilter<"Admin"> | $Enums.AdminRole
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }, "adminId" | "username">

  export type AdminOrderByWithAggregationInput = {
    adminId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    adminId?: IntWithAggregatesFilter<"Admin"> | number
    username?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    role?: EnumAdminRoleWithAggregatesFilter<"Admin"> | $Enums.AdminRole
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    theaters?: TheatersListRelationFilter
    seats?: SeatsListRelationFilter
    tickets?: TicketsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    theaters?: TheatersOrderByRelationAggregateInput
    seats?: SeatsOrderByRelationAggregateInput
    tickets?: TicketsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    theaters?: TheatersListRelationFilter
    seats?: SeatsListRelationFilter
    tickets?: TicketsListRelationFilter
  }, "userId" | "email">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TheatersWhereInput = {
    AND?: TheatersWhereInput | TheatersWhereInput[]
    OR?: TheatersWhereInput[]
    NOT?: TheatersWhereInput | TheatersWhereInput[]
    theatherId?: IntFilter<"Theaters"> | number
    name?: StringFilter<"Theaters"> | string
    location?: StringFilter<"Theaters"> | string
    movies?: MoviesListRelationFilter
    users?: UserListRelationFilter
    seats?: SeatsListRelationFilter
  }

  export type TheatersOrderByWithRelationInput = {
    theatherId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    movies?: MoviesOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    seats?: SeatsOrderByRelationAggregateInput
  }

  export type TheatersWhereUniqueInput = Prisma.AtLeast<{
    theatherId?: number
    AND?: TheatersWhereInput | TheatersWhereInput[]
    OR?: TheatersWhereInput[]
    NOT?: TheatersWhereInput | TheatersWhereInput[]
    name?: StringFilter<"Theaters"> | string
    location?: StringFilter<"Theaters"> | string
    movies?: MoviesListRelationFilter
    users?: UserListRelationFilter
    seats?: SeatsListRelationFilter
  }, "theatherId">

  export type TheatersOrderByWithAggregationInput = {
    theatherId?: SortOrder
    name?: SortOrder
    location?: SortOrder
    _count?: TheatersCountOrderByAggregateInput
    _avg?: TheatersAvgOrderByAggregateInput
    _max?: TheatersMaxOrderByAggregateInput
    _min?: TheatersMinOrderByAggregateInput
    _sum?: TheatersSumOrderByAggregateInput
  }

  export type TheatersScalarWhereWithAggregatesInput = {
    AND?: TheatersScalarWhereWithAggregatesInput | TheatersScalarWhereWithAggregatesInput[]
    OR?: TheatersScalarWhereWithAggregatesInput[]
    NOT?: TheatersScalarWhereWithAggregatesInput | TheatersScalarWhereWithAggregatesInput[]
    theatherId?: IntWithAggregatesFilter<"Theaters"> | number
    name?: StringWithAggregatesFilter<"Theaters"> | string
    location?: StringWithAggregatesFilter<"Theaters"> | string
  }

  export type SeatsWhereInput = {
    AND?: SeatsWhereInput | SeatsWhereInput[]
    OR?: SeatsWhereInput[]
    NOT?: SeatsWhereInput | SeatsWhereInput[]
    seatId?: IntFilter<"Seats"> | number
    seatNumber?: StringFilter<"Seats"> | string
    seatType?: StringFilter<"Seats"> | string
    theaterID?: IntFilter<"Seats"> | number
    theater?: XOR<TheatersScalarRelationFilter, TheatersWhereInput>
    users?: UserListRelationFilter
  }

  export type SeatsOrderByWithRelationInput = {
    seatId?: SortOrder
    seatNumber?: SortOrder
    seatType?: SortOrder
    theaterID?: SortOrder
    theater?: TheatersOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
  }

  export type SeatsWhereUniqueInput = Prisma.AtLeast<{
    seatId?: number
    AND?: SeatsWhereInput | SeatsWhereInput[]
    OR?: SeatsWhereInput[]
    NOT?: SeatsWhereInput | SeatsWhereInput[]
    seatNumber?: StringFilter<"Seats"> | string
    seatType?: StringFilter<"Seats"> | string
    theaterID?: IntFilter<"Seats"> | number
    theater?: XOR<TheatersScalarRelationFilter, TheatersWhereInput>
    users?: UserListRelationFilter
  }, "seatId">

  export type SeatsOrderByWithAggregationInput = {
    seatId?: SortOrder
    seatNumber?: SortOrder
    seatType?: SortOrder
    theaterID?: SortOrder
    _count?: SeatsCountOrderByAggregateInput
    _avg?: SeatsAvgOrderByAggregateInput
    _max?: SeatsMaxOrderByAggregateInput
    _min?: SeatsMinOrderByAggregateInput
    _sum?: SeatsSumOrderByAggregateInput
  }

  export type SeatsScalarWhereWithAggregatesInput = {
    AND?: SeatsScalarWhereWithAggregatesInput | SeatsScalarWhereWithAggregatesInput[]
    OR?: SeatsScalarWhereWithAggregatesInput[]
    NOT?: SeatsScalarWhereWithAggregatesInput | SeatsScalarWhereWithAggregatesInput[]
    seatId?: IntWithAggregatesFilter<"Seats"> | number
    seatNumber?: StringWithAggregatesFilter<"Seats"> | string
    seatType?: StringWithAggregatesFilter<"Seats"> | string
    theaterID?: IntWithAggregatesFilter<"Seats"> | number
  }

  export type MoviesWhereInput = {
    AND?: MoviesWhereInput | MoviesWhereInput[]
    OR?: MoviesWhereInput[]
    NOT?: MoviesWhereInput | MoviesWhereInput[]
    movieId?: IntFilter<"Movies"> | number
    title?: StringFilter<"Movies"> | string
    description?: StringFilter<"Movies"> | string
    duration?: IntFilter<"Movies"> | number
    releaseDate?: DateTimeFilter<"Movies"> | Date | string
    schedules?: MovieSchedulesListRelationFilter
    theaters?: TheatersListRelationFilter
  }

  export type MoviesOrderByWithRelationInput = {
    movieId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    releaseDate?: SortOrder
    schedules?: MovieSchedulesOrderByRelationAggregateInput
    theaters?: TheatersOrderByRelationAggregateInput
  }

  export type MoviesWhereUniqueInput = Prisma.AtLeast<{
    movieId?: number
    AND?: MoviesWhereInput | MoviesWhereInput[]
    OR?: MoviesWhereInput[]
    NOT?: MoviesWhereInput | MoviesWhereInput[]
    title?: StringFilter<"Movies"> | string
    description?: StringFilter<"Movies"> | string
    duration?: IntFilter<"Movies"> | number
    releaseDate?: DateTimeFilter<"Movies"> | Date | string
    schedules?: MovieSchedulesListRelationFilter
    theaters?: TheatersListRelationFilter
  }, "movieId">

  export type MoviesOrderByWithAggregationInput = {
    movieId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    releaseDate?: SortOrder
    _count?: MoviesCountOrderByAggregateInput
    _avg?: MoviesAvgOrderByAggregateInput
    _max?: MoviesMaxOrderByAggregateInput
    _min?: MoviesMinOrderByAggregateInput
    _sum?: MoviesSumOrderByAggregateInput
  }

  export type MoviesScalarWhereWithAggregatesInput = {
    AND?: MoviesScalarWhereWithAggregatesInput | MoviesScalarWhereWithAggregatesInput[]
    OR?: MoviesScalarWhereWithAggregatesInput[]
    NOT?: MoviesScalarWhereWithAggregatesInput | MoviesScalarWhereWithAggregatesInput[]
    movieId?: IntWithAggregatesFilter<"Movies"> | number
    title?: StringWithAggregatesFilter<"Movies"> | string
    description?: StringWithAggregatesFilter<"Movies"> | string
    duration?: IntWithAggregatesFilter<"Movies"> | number
    releaseDate?: DateTimeWithAggregatesFilter<"Movies"> | Date | string
  }

  export type MovieSchedulesWhereInput = {
    AND?: MovieSchedulesWhereInput | MovieSchedulesWhereInput[]
    OR?: MovieSchedulesWhereInput[]
    NOT?: MovieSchedulesWhereInput | MovieSchedulesWhereInput[]
    scheduleId?: IntFilter<"MovieSchedules"> | number
    startTime?: DateTimeFilter<"MovieSchedules"> | Date | string
    endTime?: DateTimeFilter<"MovieSchedules"> | Date | string
    movieID?: IntFilter<"MovieSchedules"> | number
    movie?: XOR<MoviesScalarRelationFilter, MoviesWhereInput>
    tickets?: TicketsListRelationFilter
  }

  export type MovieSchedulesOrderByWithRelationInput = {
    scheduleId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    movieID?: SortOrder
    movie?: MoviesOrderByWithRelationInput
    tickets?: TicketsOrderByRelationAggregateInput
  }

  export type MovieSchedulesWhereUniqueInput = Prisma.AtLeast<{
    scheduleId?: number
    AND?: MovieSchedulesWhereInput | MovieSchedulesWhereInput[]
    OR?: MovieSchedulesWhereInput[]
    NOT?: MovieSchedulesWhereInput | MovieSchedulesWhereInput[]
    startTime?: DateTimeFilter<"MovieSchedules"> | Date | string
    endTime?: DateTimeFilter<"MovieSchedules"> | Date | string
    movieID?: IntFilter<"MovieSchedules"> | number
    movie?: XOR<MoviesScalarRelationFilter, MoviesWhereInput>
    tickets?: TicketsListRelationFilter
  }, "scheduleId">

  export type MovieSchedulesOrderByWithAggregationInput = {
    scheduleId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    movieID?: SortOrder
    _count?: MovieSchedulesCountOrderByAggregateInput
    _avg?: MovieSchedulesAvgOrderByAggregateInput
    _max?: MovieSchedulesMaxOrderByAggregateInput
    _min?: MovieSchedulesMinOrderByAggregateInput
    _sum?: MovieSchedulesSumOrderByAggregateInput
  }

  export type MovieSchedulesScalarWhereWithAggregatesInput = {
    AND?: MovieSchedulesScalarWhereWithAggregatesInput | MovieSchedulesScalarWhereWithAggregatesInput[]
    OR?: MovieSchedulesScalarWhereWithAggregatesInput[]
    NOT?: MovieSchedulesScalarWhereWithAggregatesInput | MovieSchedulesScalarWhereWithAggregatesInput[]
    scheduleId?: IntWithAggregatesFilter<"MovieSchedules"> | number
    startTime?: DateTimeWithAggregatesFilter<"MovieSchedules"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"MovieSchedules"> | Date | string
    movieID?: IntWithAggregatesFilter<"MovieSchedules"> | number
  }

  export type TicketsWhereInput = {
    AND?: TicketsWhereInput | TicketsWhereInput[]
    OR?: TicketsWhereInput[]
    NOT?: TicketsWhereInput | TicketsWhereInput[]
    ticketId?: IntFilter<"Tickets"> | number
    ticketNumber?: StringFilter<"Tickets"> | string
    price?: DecimalFilter<"Tickets"> | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFilter<"Tickets"> | number
    userID?: IntFilter<"Tickets"> | number
    stripeID?: IntFilter<"Tickets"> | number
    schedule?: XOR<MovieSchedulesScalarRelationFilter, MovieSchedulesWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    stripe?: XOR<StripeScalarRelationFilter, StripeWhereInput>
  }

  export type TicketsOrderByWithRelationInput = {
    ticketId?: SortOrder
    ticketNumber?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
    schedule?: MovieSchedulesOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    stripe?: StripeOrderByWithRelationInput
  }

  export type TicketsWhereUniqueInput = Prisma.AtLeast<{
    ticketId?: number
    ticketNumber?: string
    stripeID?: number
    AND?: TicketsWhereInput | TicketsWhereInput[]
    OR?: TicketsWhereInput[]
    NOT?: TicketsWhereInput | TicketsWhereInput[]
    price?: DecimalFilter<"Tickets"> | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFilter<"Tickets"> | number
    userID?: IntFilter<"Tickets"> | number
    schedule?: XOR<MovieSchedulesScalarRelationFilter, MovieSchedulesWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    stripe?: XOR<StripeScalarRelationFilter, StripeWhereInput>
  }, "ticketId" | "ticketNumber" | "stripeID">

  export type TicketsOrderByWithAggregationInput = {
    ticketId?: SortOrder
    ticketNumber?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
    _count?: TicketsCountOrderByAggregateInput
    _avg?: TicketsAvgOrderByAggregateInput
    _max?: TicketsMaxOrderByAggregateInput
    _min?: TicketsMinOrderByAggregateInput
    _sum?: TicketsSumOrderByAggregateInput
  }

  export type TicketsScalarWhereWithAggregatesInput = {
    AND?: TicketsScalarWhereWithAggregatesInput | TicketsScalarWhereWithAggregatesInput[]
    OR?: TicketsScalarWhereWithAggregatesInput[]
    NOT?: TicketsScalarWhereWithAggregatesInput | TicketsScalarWhereWithAggregatesInput[]
    ticketId?: IntWithAggregatesFilter<"Tickets"> | number
    ticketNumber?: StringWithAggregatesFilter<"Tickets"> | string
    price?: DecimalWithAggregatesFilter<"Tickets"> | Decimal | DecimalJsLike | number | string
    scheduleID?: IntWithAggregatesFilter<"Tickets"> | number
    userID?: IntWithAggregatesFilter<"Tickets"> | number
    stripeID?: IntWithAggregatesFilter<"Tickets"> | number
  }

  export type StripeWhereInput = {
    AND?: StripeWhereInput | StripeWhereInput[]
    OR?: StripeWhereInput[]
    NOT?: StripeWhereInput | StripeWhereInput[]
    stripeId?: IntFilter<"Stripe"> | number
    customerID?: StringFilter<"Stripe"> | string
    paymentMethodID?: StringFilter<"Stripe"> | string
    tickets?: TicketsListRelationFilter
  }

  export type StripeOrderByWithRelationInput = {
    stripeId?: SortOrder
    customerID?: SortOrder
    paymentMethodID?: SortOrder
    tickets?: TicketsOrderByRelationAggregateInput
  }

  export type StripeWhereUniqueInput = Prisma.AtLeast<{
    stripeId?: number
    customerID?: string
    paymentMethodID?: string
    AND?: StripeWhereInput | StripeWhereInput[]
    OR?: StripeWhereInput[]
    NOT?: StripeWhereInput | StripeWhereInput[]
    tickets?: TicketsListRelationFilter
  }, "stripeId" | "customerID" | "paymentMethodID">

  export type StripeOrderByWithAggregationInput = {
    stripeId?: SortOrder
    customerID?: SortOrder
    paymentMethodID?: SortOrder
    _count?: StripeCountOrderByAggregateInput
    _avg?: StripeAvgOrderByAggregateInput
    _max?: StripeMaxOrderByAggregateInput
    _min?: StripeMinOrderByAggregateInput
    _sum?: StripeSumOrderByAggregateInput
  }

  export type StripeScalarWhereWithAggregatesInput = {
    AND?: StripeScalarWhereWithAggregatesInput | StripeScalarWhereWithAggregatesInput[]
    OR?: StripeScalarWhereWithAggregatesInput[]
    NOT?: StripeScalarWhereWithAggregatesInput | StripeScalarWhereWithAggregatesInput[]
    stripeId?: IntWithAggregatesFilter<"Stripe"> | number
    customerID?: StringWithAggregatesFilter<"Stripe"> | string
    paymentMethodID?: StringWithAggregatesFilter<"Stripe"> | string
  }

  export type AdminCreateInput = {
    username: string
    password: string
    role: $Enums.AdminRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    adminId?: number
    username: string
    password: string
    role: $Enums.AdminRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    adminId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    adminId?: number
    username: string
    password: string
    role: $Enums.AdminRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    adminId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleFieldUpdateOperationsInput | $Enums.AdminRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    theaters?: TheatersCreateNestedManyWithoutUsersInput
    seats?: SeatsCreateNestedManyWithoutUsersInput
    tickets?: TicketsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: number
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    theaters?: TheatersUncheckedCreateNestedManyWithoutUsersInput
    seats?: SeatsUncheckedCreateNestedManyWithoutUsersInput
    tickets?: TicketsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUpdateManyWithoutUsersNestedInput
    seats?: SeatsUpdateManyWithoutUsersNestedInput
    tickets?: TicketsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUncheckedUpdateManyWithoutUsersNestedInput
    seats?: SeatsUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: TicketsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: number
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheatersCreateInput = {
    name: string
    location: string
    movies?: MoviesCreateNestedManyWithoutTheatersInput
    users?: UserCreateNestedManyWithoutTheatersInput
    seats?: SeatsCreateNestedManyWithoutTheaterInput
  }

  export type TheatersUncheckedCreateInput = {
    theatherId?: number
    name: string
    location: string
    movies?: MoviesUncheckedCreateNestedManyWithoutTheatersInput
    users?: UserUncheckedCreateNestedManyWithoutTheatersInput
    seats?: SeatsUncheckedCreateNestedManyWithoutTheaterInput
  }

  export type TheatersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    movies?: MoviesUpdateManyWithoutTheatersNestedInput
    users?: UserUpdateManyWithoutTheatersNestedInput
    seats?: SeatsUpdateManyWithoutTheaterNestedInput
  }

  export type TheatersUncheckedUpdateInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    movies?: MoviesUncheckedUpdateManyWithoutTheatersNestedInput
    users?: UserUncheckedUpdateManyWithoutTheatersNestedInput
    seats?: SeatsUncheckedUpdateManyWithoutTheaterNestedInput
  }

  export type TheatersCreateManyInput = {
    theatherId?: number
    name: string
    location: string
  }

  export type TheatersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type TheatersUncheckedUpdateManyInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type SeatsCreateInput = {
    seatNumber: string
    seatType: string
    theater: TheatersCreateNestedOneWithoutSeatsInput
    users?: UserCreateNestedManyWithoutSeatsInput
  }

  export type SeatsUncheckedCreateInput = {
    seatId?: number
    seatNumber: string
    seatType: string
    theaterID: number
    users?: UserUncheckedCreateNestedManyWithoutSeatsInput
  }

  export type SeatsUpdateInput = {
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    theater?: TheatersUpdateOneRequiredWithoutSeatsNestedInput
    users?: UserUpdateManyWithoutSeatsNestedInput
  }

  export type SeatsUncheckedUpdateInput = {
    seatId?: IntFieldUpdateOperationsInput | number
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    theaterID?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutSeatsNestedInput
  }

  export type SeatsCreateManyInput = {
    seatId?: number
    seatNumber: string
    seatType: string
    theaterID: number
  }

  export type SeatsUpdateManyMutationInput = {
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
  }

  export type SeatsUncheckedUpdateManyInput = {
    seatId?: IntFieldUpdateOperationsInput | number
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    theaterID?: IntFieldUpdateOperationsInput | number
  }

  export type MoviesCreateInput = {
    title: string
    description: string
    duration: number
    releaseDate: Date | string
    schedules?: MovieSchedulesCreateNestedManyWithoutMovieInput
    theaters?: TheatersCreateNestedManyWithoutMoviesInput
  }

  export type MoviesUncheckedCreateInput = {
    movieId?: number
    title: string
    description: string
    duration: number
    releaseDate: Date | string
    schedules?: MovieSchedulesUncheckedCreateNestedManyWithoutMovieInput
    theaters?: TheatersUncheckedCreateNestedManyWithoutMoviesInput
  }

  export type MoviesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: MovieSchedulesUpdateManyWithoutMovieNestedInput
    theaters?: TheatersUpdateManyWithoutMoviesNestedInput
  }

  export type MoviesUncheckedUpdateInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: MovieSchedulesUncheckedUpdateManyWithoutMovieNestedInput
    theaters?: TheatersUncheckedUpdateManyWithoutMoviesNestedInput
  }

  export type MoviesCreateManyInput = {
    movieId?: number
    title: string
    description: string
    duration: number
    releaseDate: Date | string
  }

  export type MoviesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MoviesUncheckedUpdateManyInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieSchedulesCreateInput = {
    startTime: Date | string
    endTime: Date | string
    movie: MoviesCreateNestedOneWithoutSchedulesInput
    tickets?: TicketsCreateNestedManyWithoutScheduleInput
  }

  export type MovieSchedulesUncheckedCreateInput = {
    scheduleId?: number
    startTime: Date | string
    endTime: Date | string
    movieID: number
    tickets?: TicketsUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type MovieSchedulesUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    movie?: MoviesUpdateOneRequiredWithoutSchedulesNestedInput
    tickets?: TicketsUpdateManyWithoutScheduleNestedInput
  }

  export type MovieSchedulesUncheckedUpdateInput = {
    scheduleId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    movieID?: IntFieldUpdateOperationsInput | number
    tickets?: TicketsUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type MovieSchedulesCreateManyInput = {
    scheduleId?: number
    startTime: Date | string
    endTime: Date | string
    movieID: number
  }

  export type MovieSchedulesUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieSchedulesUncheckedUpdateManyInput = {
    scheduleId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    movieID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsCreateInput = {
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    schedule: MovieSchedulesCreateNestedOneWithoutTicketsInput
    user: UserCreateNestedOneWithoutTicketsInput
    stripe: StripeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    scheduleID: number
    userID: number
    stripeID: number
  }

  export type TicketsUpdateInput = {
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    schedule?: MovieSchedulesUpdateOneRequiredWithoutTicketsNestedInput
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
    stripe?: StripeUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFieldUpdateOperationsInput | number
    userID?: IntFieldUpdateOperationsInput | number
    stripeID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsCreateManyInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    scheduleID: number
    userID: number
    stripeID: number
  }

  export type TicketsUpdateManyMutationInput = {
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TicketsUncheckedUpdateManyInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFieldUpdateOperationsInput | number
    userID?: IntFieldUpdateOperationsInput | number
    stripeID?: IntFieldUpdateOperationsInput | number
  }

  export type StripeCreateInput = {
    customerID: string
    paymentMethodID: string
    tickets?: TicketsCreateNestedManyWithoutStripeInput
  }

  export type StripeUncheckedCreateInput = {
    stripeId?: number
    customerID: string
    paymentMethodID: string
    tickets?: TicketsUncheckedCreateNestedManyWithoutStripeInput
  }

  export type StripeUpdateInput = {
    customerID?: StringFieldUpdateOperationsInput | string
    paymentMethodID?: StringFieldUpdateOperationsInput | string
    tickets?: TicketsUpdateManyWithoutStripeNestedInput
  }

  export type StripeUncheckedUpdateInput = {
    stripeId?: IntFieldUpdateOperationsInput | number
    customerID?: StringFieldUpdateOperationsInput | string
    paymentMethodID?: StringFieldUpdateOperationsInput | string
    tickets?: TicketsUncheckedUpdateManyWithoutStripeNestedInput
  }

  export type StripeCreateManyInput = {
    stripeId?: number
    customerID: string
    paymentMethodID: string
  }

  export type StripeUpdateManyMutationInput = {
    customerID?: StringFieldUpdateOperationsInput | string
    paymentMethodID?: StringFieldUpdateOperationsInput | string
  }

  export type StripeUncheckedUpdateManyInput = {
    stripeId?: IntFieldUpdateOperationsInput | number
    customerID?: StringFieldUpdateOperationsInput | string
    paymentMethodID?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdminCountOrderByAggregateInput = {
    adminId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    adminId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    adminId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    adminId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    adminId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TheatersListRelationFilter = {
    every?: TheatersWhereInput
    some?: TheatersWhereInput
    none?: TheatersWhereInput
  }

  export type SeatsListRelationFilter = {
    every?: SeatsWhereInput
    some?: SeatsWhereInput
    none?: SeatsWhereInput
  }

  export type TicketsListRelationFilter = {
    every?: TicketsWhereInput
    some?: TicketsWhereInput
    none?: TicketsWhereInput
  }

  export type TheatersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type MoviesListRelationFilter = {
    every?: MoviesWhereInput
    some?: MoviesWhereInput
    none?: MoviesWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type MoviesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TheatersCountOrderByAggregateInput = {
    theatherId?: SortOrder
    name?: SortOrder
    location?: SortOrder
  }

  export type TheatersAvgOrderByAggregateInput = {
    theatherId?: SortOrder
  }

  export type TheatersMaxOrderByAggregateInput = {
    theatherId?: SortOrder
    name?: SortOrder
    location?: SortOrder
  }

  export type TheatersMinOrderByAggregateInput = {
    theatherId?: SortOrder
    name?: SortOrder
    location?: SortOrder
  }

  export type TheatersSumOrderByAggregateInput = {
    theatherId?: SortOrder
  }

  export type TheatersScalarRelationFilter = {
    is?: TheatersWhereInput
    isNot?: TheatersWhereInput
  }

  export type SeatsCountOrderByAggregateInput = {
    seatId?: SortOrder
    seatNumber?: SortOrder
    seatType?: SortOrder
    theaterID?: SortOrder
  }

  export type SeatsAvgOrderByAggregateInput = {
    seatId?: SortOrder
    theaterID?: SortOrder
  }

  export type SeatsMaxOrderByAggregateInput = {
    seatId?: SortOrder
    seatNumber?: SortOrder
    seatType?: SortOrder
    theaterID?: SortOrder
  }

  export type SeatsMinOrderByAggregateInput = {
    seatId?: SortOrder
    seatNumber?: SortOrder
    seatType?: SortOrder
    theaterID?: SortOrder
  }

  export type SeatsSumOrderByAggregateInput = {
    seatId?: SortOrder
    theaterID?: SortOrder
  }

  export type MovieSchedulesListRelationFilter = {
    every?: MovieSchedulesWhereInput
    some?: MovieSchedulesWhereInput
    none?: MovieSchedulesWhereInput
  }

  export type MovieSchedulesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MoviesCountOrderByAggregateInput = {
    movieId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    releaseDate?: SortOrder
  }

  export type MoviesAvgOrderByAggregateInput = {
    movieId?: SortOrder
    duration?: SortOrder
  }

  export type MoviesMaxOrderByAggregateInput = {
    movieId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    releaseDate?: SortOrder
  }

  export type MoviesMinOrderByAggregateInput = {
    movieId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    releaseDate?: SortOrder
  }

  export type MoviesSumOrderByAggregateInput = {
    movieId?: SortOrder
    duration?: SortOrder
  }

  export type MoviesScalarRelationFilter = {
    is?: MoviesWhereInput
    isNot?: MoviesWhereInput
  }

  export type MovieSchedulesCountOrderByAggregateInput = {
    scheduleId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    movieID?: SortOrder
  }

  export type MovieSchedulesAvgOrderByAggregateInput = {
    scheduleId?: SortOrder
    movieID?: SortOrder
  }

  export type MovieSchedulesMaxOrderByAggregateInput = {
    scheduleId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    movieID?: SortOrder
  }

  export type MovieSchedulesMinOrderByAggregateInput = {
    scheduleId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    movieID?: SortOrder
  }

  export type MovieSchedulesSumOrderByAggregateInput = {
    scheduleId?: SortOrder
    movieID?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type MovieSchedulesScalarRelationFilter = {
    is?: MovieSchedulesWhereInput
    isNot?: MovieSchedulesWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StripeScalarRelationFilter = {
    is?: StripeWhereInput
    isNot?: StripeWhereInput
  }

  export type TicketsCountOrderByAggregateInput = {
    ticketId?: SortOrder
    ticketNumber?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
  }

  export type TicketsAvgOrderByAggregateInput = {
    ticketId?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
  }

  export type TicketsMaxOrderByAggregateInput = {
    ticketId?: SortOrder
    ticketNumber?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
  }

  export type TicketsMinOrderByAggregateInput = {
    ticketId?: SortOrder
    ticketNumber?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
  }

  export type TicketsSumOrderByAggregateInput = {
    ticketId?: SortOrder
    price?: SortOrder
    scheduleID?: SortOrder
    userID?: SortOrder
    stripeID?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type StripeCountOrderByAggregateInput = {
    stripeId?: SortOrder
    customerID?: SortOrder
    paymentMethodID?: SortOrder
  }

  export type StripeAvgOrderByAggregateInput = {
    stripeId?: SortOrder
  }

  export type StripeMaxOrderByAggregateInput = {
    stripeId?: SortOrder
    customerID?: SortOrder
    paymentMethodID?: SortOrder
  }

  export type StripeMinOrderByAggregateInput = {
    stripeId?: SortOrder
    customerID?: SortOrder
    paymentMethodID?: SortOrder
  }

  export type StripeSumOrderByAggregateInput = {
    stripeId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAdminRoleFieldUpdateOperationsInput = {
    set?: $Enums.AdminRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TheatersCreateNestedManyWithoutUsersInput = {
    create?: XOR<TheatersCreateWithoutUsersInput, TheatersUncheckedCreateWithoutUsersInput> | TheatersCreateWithoutUsersInput[] | TheatersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutUsersInput | TheatersCreateOrConnectWithoutUsersInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
  }

  export type SeatsCreateNestedManyWithoutUsersInput = {
    create?: XOR<SeatsCreateWithoutUsersInput, SeatsUncheckedCreateWithoutUsersInput> | SeatsCreateWithoutUsersInput[] | SeatsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutUsersInput | SeatsCreateOrConnectWithoutUsersInput[]
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
  }

  export type TicketsCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TheatersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<TheatersCreateWithoutUsersInput, TheatersUncheckedCreateWithoutUsersInput> | TheatersCreateWithoutUsersInput[] | TheatersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutUsersInput | TheatersCreateOrConnectWithoutUsersInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
  }

  export type SeatsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<SeatsCreateWithoutUsersInput, SeatsUncheckedCreateWithoutUsersInput> | SeatsCreateWithoutUsersInput[] | SeatsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutUsersInput | SeatsCreateOrConnectWithoutUsersInput[]
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
  }

  export type TicketsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TheatersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<TheatersCreateWithoutUsersInput, TheatersUncheckedCreateWithoutUsersInput> | TheatersCreateWithoutUsersInput[] | TheatersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutUsersInput | TheatersCreateOrConnectWithoutUsersInput[]
    upsert?: TheatersUpsertWithWhereUniqueWithoutUsersInput | TheatersUpsertWithWhereUniqueWithoutUsersInput[]
    set?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    disconnect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    delete?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    update?: TheatersUpdateWithWhereUniqueWithoutUsersInput | TheatersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: TheatersUpdateManyWithWhereWithoutUsersInput | TheatersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: TheatersScalarWhereInput | TheatersScalarWhereInput[]
  }

  export type SeatsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<SeatsCreateWithoutUsersInput, SeatsUncheckedCreateWithoutUsersInput> | SeatsCreateWithoutUsersInput[] | SeatsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutUsersInput | SeatsCreateOrConnectWithoutUsersInput[]
    upsert?: SeatsUpsertWithWhereUniqueWithoutUsersInput | SeatsUpsertWithWhereUniqueWithoutUsersInput[]
    set?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    disconnect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    delete?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    update?: SeatsUpdateWithWhereUniqueWithoutUsersInput | SeatsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: SeatsUpdateManyWithWhereWithoutUsersInput | SeatsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: SeatsScalarWhereInput | SeatsScalarWhereInput[]
  }

  export type TicketsUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutUserInput | TicketsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutUserInput | TicketsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutUserInput | TicketsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type TheatersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<TheatersCreateWithoutUsersInput, TheatersUncheckedCreateWithoutUsersInput> | TheatersCreateWithoutUsersInput[] | TheatersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutUsersInput | TheatersCreateOrConnectWithoutUsersInput[]
    upsert?: TheatersUpsertWithWhereUniqueWithoutUsersInput | TheatersUpsertWithWhereUniqueWithoutUsersInput[]
    set?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    disconnect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    delete?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    update?: TheatersUpdateWithWhereUniqueWithoutUsersInput | TheatersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: TheatersUpdateManyWithWhereWithoutUsersInput | TheatersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: TheatersScalarWhereInput | TheatersScalarWhereInput[]
  }

  export type SeatsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<SeatsCreateWithoutUsersInput, SeatsUncheckedCreateWithoutUsersInput> | SeatsCreateWithoutUsersInput[] | SeatsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutUsersInput | SeatsCreateOrConnectWithoutUsersInput[]
    upsert?: SeatsUpsertWithWhereUniqueWithoutUsersInput | SeatsUpsertWithWhereUniqueWithoutUsersInput[]
    set?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    disconnect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    delete?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    update?: SeatsUpdateWithWhereUniqueWithoutUsersInput | SeatsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: SeatsUpdateManyWithWhereWithoutUsersInput | SeatsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: SeatsScalarWhereInput | SeatsScalarWhereInput[]
  }

  export type TicketsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutUserInput | TicketsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutUserInput | TicketsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutUserInput | TicketsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type MoviesCreateNestedManyWithoutTheatersInput = {
    create?: XOR<MoviesCreateWithoutTheatersInput, MoviesUncheckedCreateWithoutTheatersInput> | MoviesCreateWithoutTheatersInput[] | MoviesUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: MoviesCreateOrConnectWithoutTheatersInput | MoviesCreateOrConnectWithoutTheatersInput[]
    connect?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTheatersInput = {
    create?: XOR<UserCreateWithoutTheatersInput, UserUncheckedCreateWithoutTheatersInput> | UserCreateWithoutTheatersInput[] | UserUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTheatersInput | UserCreateOrConnectWithoutTheatersInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SeatsCreateNestedManyWithoutTheaterInput = {
    create?: XOR<SeatsCreateWithoutTheaterInput, SeatsUncheckedCreateWithoutTheaterInput> | SeatsCreateWithoutTheaterInput[] | SeatsUncheckedCreateWithoutTheaterInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutTheaterInput | SeatsCreateOrConnectWithoutTheaterInput[]
    createMany?: SeatsCreateManyTheaterInputEnvelope
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
  }

  export type MoviesUncheckedCreateNestedManyWithoutTheatersInput = {
    create?: XOR<MoviesCreateWithoutTheatersInput, MoviesUncheckedCreateWithoutTheatersInput> | MoviesCreateWithoutTheatersInput[] | MoviesUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: MoviesCreateOrConnectWithoutTheatersInput | MoviesCreateOrConnectWithoutTheatersInput[]
    connect?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTheatersInput = {
    create?: XOR<UserCreateWithoutTheatersInput, UserUncheckedCreateWithoutTheatersInput> | UserCreateWithoutTheatersInput[] | UserUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTheatersInput | UserCreateOrConnectWithoutTheatersInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SeatsUncheckedCreateNestedManyWithoutTheaterInput = {
    create?: XOR<SeatsCreateWithoutTheaterInput, SeatsUncheckedCreateWithoutTheaterInput> | SeatsCreateWithoutTheaterInput[] | SeatsUncheckedCreateWithoutTheaterInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutTheaterInput | SeatsCreateOrConnectWithoutTheaterInput[]
    createMany?: SeatsCreateManyTheaterInputEnvelope
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
  }

  export type MoviesUpdateManyWithoutTheatersNestedInput = {
    create?: XOR<MoviesCreateWithoutTheatersInput, MoviesUncheckedCreateWithoutTheatersInput> | MoviesCreateWithoutTheatersInput[] | MoviesUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: MoviesCreateOrConnectWithoutTheatersInput | MoviesCreateOrConnectWithoutTheatersInput[]
    upsert?: MoviesUpsertWithWhereUniqueWithoutTheatersInput | MoviesUpsertWithWhereUniqueWithoutTheatersInput[]
    set?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    disconnect?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    delete?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    connect?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    update?: MoviesUpdateWithWhereUniqueWithoutTheatersInput | MoviesUpdateWithWhereUniqueWithoutTheatersInput[]
    updateMany?: MoviesUpdateManyWithWhereWithoutTheatersInput | MoviesUpdateManyWithWhereWithoutTheatersInput[]
    deleteMany?: MoviesScalarWhereInput | MoviesScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTheatersNestedInput = {
    create?: XOR<UserCreateWithoutTheatersInput, UserUncheckedCreateWithoutTheatersInput> | UserCreateWithoutTheatersInput[] | UserUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTheatersInput | UserCreateOrConnectWithoutTheatersInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTheatersInput | UserUpsertWithWhereUniqueWithoutTheatersInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTheatersInput | UserUpdateWithWhereUniqueWithoutTheatersInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTheatersInput | UserUpdateManyWithWhereWithoutTheatersInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SeatsUpdateManyWithoutTheaterNestedInput = {
    create?: XOR<SeatsCreateWithoutTheaterInput, SeatsUncheckedCreateWithoutTheaterInput> | SeatsCreateWithoutTheaterInput[] | SeatsUncheckedCreateWithoutTheaterInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutTheaterInput | SeatsCreateOrConnectWithoutTheaterInput[]
    upsert?: SeatsUpsertWithWhereUniqueWithoutTheaterInput | SeatsUpsertWithWhereUniqueWithoutTheaterInput[]
    createMany?: SeatsCreateManyTheaterInputEnvelope
    set?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    disconnect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    delete?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    update?: SeatsUpdateWithWhereUniqueWithoutTheaterInput | SeatsUpdateWithWhereUniqueWithoutTheaterInput[]
    updateMany?: SeatsUpdateManyWithWhereWithoutTheaterInput | SeatsUpdateManyWithWhereWithoutTheaterInput[]
    deleteMany?: SeatsScalarWhereInput | SeatsScalarWhereInput[]
  }

  export type MoviesUncheckedUpdateManyWithoutTheatersNestedInput = {
    create?: XOR<MoviesCreateWithoutTheatersInput, MoviesUncheckedCreateWithoutTheatersInput> | MoviesCreateWithoutTheatersInput[] | MoviesUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: MoviesCreateOrConnectWithoutTheatersInput | MoviesCreateOrConnectWithoutTheatersInput[]
    upsert?: MoviesUpsertWithWhereUniqueWithoutTheatersInput | MoviesUpsertWithWhereUniqueWithoutTheatersInput[]
    set?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    disconnect?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    delete?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    connect?: MoviesWhereUniqueInput | MoviesWhereUniqueInput[]
    update?: MoviesUpdateWithWhereUniqueWithoutTheatersInput | MoviesUpdateWithWhereUniqueWithoutTheatersInput[]
    updateMany?: MoviesUpdateManyWithWhereWithoutTheatersInput | MoviesUpdateManyWithWhereWithoutTheatersInput[]
    deleteMany?: MoviesScalarWhereInput | MoviesScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTheatersNestedInput = {
    create?: XOR<UserCreateWithoutTheatersInput, UserUncheckedCreateWithoutTheatersInput> | UserCreateWithoutTheatersInput[] | UserUncheckedCreateWithoutTheatersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTheatersInput | UserCreateOrConnectWithoutTheatersInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTheatersInput | UserUpsertWithWhereUniqueWithoutTheatersInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTheatersInput | UserUpdateWithWhereUniqueWithoutTheatersInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTheatersInput | UserUpdateManyWithWhereWithoutTheatersInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SeatsUncheckedUpdateManyWithoutTheaterNestedInput = {
    create?: XOR<SeatsCreateWithoutTheaterInput, SeatsUncheckedCreateWithoutTheaterInput> | SeatsCreateWithoutTheaterInput[] | SeatsUncheckedCreateWithoutTheaterInput[]
    connectOrCreate?: SeatsCreateOrConnectWithoutTheaterInput | SeatsCreateOrConnectWithoutTheaterInput[]
    upsert?: SeatsUpsertWithWhereUniqueWithoutTheaterInput | SeatsUpsertWithWhereUniqueWithoutTheaterInput[]
    createMany?: SeatsCreateManyTheaterInputEnvelope
    set?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    disconnect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    delete?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    connect?: SeatsWhereUniqueInput | SeatsWhereUniqueInput[]
    update?: SeatsUpdateWithWhereUniqueWithoutTheaterInput | SeatsUpdateWithWhereUniqueWithoutTheaterInput[]
    updateMany?: SeatsUpdateManyWithWhereWithoutTheaterInput | SeatsUpdateManyWithWhereWithoutTheaterInput[]
    deleteMany?: SeatsScalarWhereInput | SeatsScalarWhereInput[]
  }

  export type TheatersCreateNestedOneWithoutSeatsInput = {
    create?: XOR<TheatersCreateWithoutSeatsInput, TheatersUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: TheatersCreateOrConnectWithoutSeatsInput
    connect?: TheatersWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutSeatsInput = {
    create?: XOR<UserCreateWithoutSeatsInput, UserUncheckedCreateWithoutSeatsInput> | UserCreateWithoutSeatsInput[] | UserUncheckedCreateWithoutSeatsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSeatsInput | UserCreateOrConnectWithoutSeatsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSeatsInput = {
    create?: XOR<UserCreateWithoutSeatsInput, UserUncheckedCreateWithoutSeatsInput> | UserCreateWithoutSeatsInput[] | UserUncheckedCreateWithoutSeatsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSeatsInput | UserCreateOrConnectWithoutSeatsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TheatersUpdateOneRequiredWithoutSeatsNestedInput = {
    create?: XOR<TheatersCreateWithoutSeatsInput, TheatersUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: TheatersCreateOrConnectWithoutSeatsInput
    upsert?: TheatersUpsertWithoutSeatsInput
    connect?: TheatersWhereUniqueInput
    update?: XOR<XOR<TheatersUpdateToOneWithWhereWithoutSeatsInput, TheatersUpdateWithoutSeatsInput>, TheatersUncheckedUpdateWithoutSeatsInput>
  }

  export type UserUpdateManyWithoutSeatsNestedInput = {
    create?: XOR<UserCreateWithoutSeatsInput, UserUncheckedCreateWithoutSeatsInput> | UserCreateWithoutSeatsInput[] | UserUncheckedCreateWithoutSeatsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSeatsInput | UserCreateOrConnectWithoutSeatsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSeatsInput | UserUpsertWithWhereUniqueWithoutSeatsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSeatsInput | UserUpdateWithWhereUniqueWithoutSeatsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSeatsInput | UserUpdateManyWithWhereWithoutSeatsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSeatsNestedInput = {
    create?: XOR<UserCreateWithoutSeatsInput, UserUncheckedCreateWithoutSeatsInput> | UserCreateWithoutSeatsInput[] | UserUncheckedCreateWithoutSeatsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSeatsInput | UserCreateOrConnectWithoutSeatsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSeatsInput | UserUpsertWithWhereUniqueWithoutSeatsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSeatsInput | UserUpdateWithWhereUniqueWithoutSeatsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSeatsInput | UserUpdateManyWithWhereWithoutSeatsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type MovieSchedulesCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieSchedulesCreateWithoutMovieInput, MovieSchedulesUncheckedCreateWithoutMovieInput> | MovieSchedulesCreateWithoutMovieInput[] | MovieSchedulesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieSchedulesCreateOrConnectWithoutMovieInput | MovieSchedulesCreateOrConnectWithoutMovieInput[]
    createMany?: MovieSchedulesCreateManyMovieInputEnvelope
    connect?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
  }

  export type TheatersCreateNestedManyWithoutMoviesInput = {
    create?: XOR<TheatersCreateWithoutMoviesInput, TheatersUncheckedCreateWithoutMoviesInput> | TheatersCreateWithoutMoviesInput[] | TheatersUncheckedCreateWithoutMoviesInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutMoviesInput | TheatersCreateOrConnectWithoutMoviesInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
  }

  export type MovieSchedulesUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieSchedulesCreateWithoutMovieInput, MovieSchedulesUncheckedCreateWithoutMovieInput> | MovieSchedulesCreateWithoutMovieInput[] | MovieSchedulesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieSchedulesCreateOrConnectWithoutMovieInput | MovieSchedulesCreateOrConnectWithoutMovieInput[]
    createMany?: MovieSchedulesCreateManyMovieInputEnvelope
    connect?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
  }

  export type TheatersUncheckedCreateNestedManyWithoutMoviesInput = {
    create?: XOR<TheatersCreateWithoutMoviesInput, TheatersUncheckedCreateWithoutMoviesInput> | TheatersCreateWithoutMoviesInput[] | TheatersUncheckedCreateWithoutMoviesInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutMoviesInput | TheatersCreateOrConnectWithoutMoviesInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
  }

  export type MovieSchedulesUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieSchedulesCreateWithoutMovieInput, MovieSchedulesUncheckedCreateWithoutMovieInput> | MovieSchedulesCreateWithoutMovieInput[] | MovieSchedulesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieSchedulesCreateOrConnectWithoutMovieInput | MovieSchedulesCreateOrConnectWithoutMovieInput[]
    upsert?: MovieSchedulesUpsertWithWhereUniqueWithoutMovieInput | MovieSchedulesUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieSchedulesCreateManyMovieInputEnvelope
    set?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    disconnect?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    delete?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    connect?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    update?: MovieSchedulesUpdateWithWhereUniqueWithoutMovieInput | MovieSchedulesUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieSchedulesUpdateManyWithWhereWithoutMovieInput | MovieSchedulesUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieSchedulesScalarWhereInput | MovieSchedulesScalarWhereInput[]
  }

  export type TheatersUpdateManyWithoutMoviesNestedInput = {
    create?: XOR<TheatersCreateWithoutMoviesInput, TheatersUncheckedCreateWithoutMoviesInput> | TheatersCreateWithoutMoviesInput[] | TheatersUncheckedCreateWithoutMoviesInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutMoviesInput | TheatersCreateOrConnectWithoutMoviesInput[]
    upsert?: TheatersUpsertWithWhereUniqueWithoutMoviesInput | TheatersUpsertWithWhereUniqueWithoutMoviesInput[]
    set?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    disconnect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    delete?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    update?: TheatersUpdateWithWhereUniqueWithoutMoviesInput | TheatersUpdateWithWhereUniqueWithoutMoviesInput[]
    updateMany?: TheatersUpdateManyWithWhereWithoutMoviesInput | TheatersUpdateManyWithWhereWithoutMoviesInput[]
    deleteMany?: TheatersScalarWhereInput | TheatersScalarWhereInput[]
  }

  export type MovieSchedulesUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieSchedulesCreateWithoutMovieInput, MovieSchedulesUncheckedCreateWithoutMovieInput> | MovieSchedulesCreateWithoutMovieInput[] | MovieSchedulesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieSchedulesCreateOrConnectWithoutMovieInput | MovieSchedulesCreateOrConnectWithoutMovieInput[]
    upsert?: MovieSchedulesUpsertWithWhereUniqueWithoutMovieInput | MovieSchedulesUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieSchedulesCreateManyMovieInputEnvelope
    set?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    disconnect?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    delete?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    connect?: MovieSchedulesWhereUniqueInput | MovieSchedulesWhereUniqueInput[]
    update?: MovieSchedulesUpdateWithWhereUniqueWithoutMovieInput | MovieSchedulesUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieSchedulesUpdateManyWithWhereWithoutMovieInput | MovieSchedulesUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieSchedulesScalarWhereInput | MovieSchedulesScalarWhereInput[]
  }

  export type TheatersUncheckedUpdateManyWithoutMoviesNestedInput = {
    create?: XOR<TheatersCreateWithoutMoviesInput, TheatersUncheckedCreateWithoutMoviesInput> | TheatersCreateWithoutMoviesInput[] | TheatersUncheckedCreateWithoutMoviesInput[]
    connectOrCreate?: TheatersCreateOrConnectWithoutMoviesInput | TheatersCreateOrConnectWithoutMoviesInput[]
    upsert?: TheatersUpsertWithWhereUniqueWithoutMoviesInput | TheatersUpsertWithWhereUniqueWithoutMoviesInput[]
    set?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    disconnect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    delete?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    connect?: TheatersWhereUniqueInput | TheatersWhereUniqueInput[]
    update?: TheatersUpdateWithWhereUniqueWithoutMoviesInput | TheatersUpdateWithWhereUniqueWithoutMoviesInput[]
    updateMany?: TheatersUpdateManyWithWhereWithoutMoviesInput | TheatersUpdateManyWithWhereWithoutMoviesInput[]
    deleteMany?: TheatersScalarWhereInput | TheatersScalarWhereInput[]
  }

  export type MoviesCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<MoviesCreateWithoutSchedulesInput, MoviesUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutSchedulesInput
    connect?: MoviesWhereUniqueInput
  }

  export type TicketsCreateNestedManyWithoutScheduleInput = {
    create?: XOR<TicketsCreateWithoutScheduleInput, TicketsUncheckedCreateWithoutScheduleInput> | TicketsCreateWithoutScheduleInput[] | TicketsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutScheduleInput | TicketsCreateOrConnectWithoutScheduleInput[]
    createMany?: TicketsCreateManyScheduleInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TicketsUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<TicketsCreateWithoutScheduleInput, TicketsUncheckedCreateWithoutScheduleInput> | TicketsCreateWithoutScheduleInput[] | TicketsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutScheduleInput | TicketsCreateOrConnectWithoutScheduleInput[]
    createMany?: TicketsCreateManyScheduleInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type MoviesUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<MoviesCreateWithoutSchedulesInput, MoviesUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutSchedulesInput
    upsert?: MoviesUpsertWithoutSchedulesInput
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutSchedulesInput, MoviesUpdateWithoutSchedulesInput>, MoviesUncheckedUpdateWithoutSchedulesInput>
  }

  export type TicketsUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<TicketsCreateWithoutScheduleInput, TicketsUncheckedCreateWithoutScheduleInput> | TicketsCreateWithoutScheduleInput[] | TicketsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutScheduleInput | TicketsCreateOrConnectWithoutScheduleInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutScheduleInput | TicketsUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: TicketsCreateManyScheduleInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutScheduleInput | TicketsUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutScheduleInput | TicketsUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type TicketsUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<TicketsCreateWithoutScheduleInput, TicketsUncheckedCreateWithoutScheduleInput> | TicketsCreateWithoutScheduleInput[] | TicketsUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutScheduleInput | TicketsCreateOrConnectWithoutScheduleInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutScheduleInput | TicketsUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: TicketsCreateManyScheduleInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutScheduleInput | TicketsUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutScheduleInput | TicketsUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type MovieSchedulesCreateNestedOneWithoutTicketsInput = {
    create?: XOR<MovieSchedulesCreateWithoutTicketsInput, MovieSchedulesUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: MovieSchedulesCreateOrConnectWithoutTicketsInput
    connect?: MovieSchedulesWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTicketsInput = {
    create?: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type StripeCreateNestedOneWithoutTicketsInput = {
    create?: XOR<StripeCreateWithoutTicketsInput, StripeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: StripeCreateOrConnectWithoutTicketsInput
    connect?: StripeWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type MovieSchedulesUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<MovieSchedulesCreateWithoutTicketsInput, MovieSchedulesUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: MovieSchedulesCreateOrConnectWithoutTicketsInput
    upsert?: MovieSchedulesUpsertWithoutTicketsInput
    connect?: MovieSchedulesWhereUniqueInput
    update?: XOR<XOR<MovieSchedulesUpdateToOneWithWhereWithoutTicketsInput, MovieSchedulesUpdateWithoutTicketsInput>, MovieSchedulesUncheckedUpdateWithoutTicketsInput>
  }

  export type UserUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTicketsInput
    upsert?: UserUpsertWithoutTicketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTicketsInput, UserUpdateWithoutTicketsInput>, UserUncheckedUpdateWithoutTicketsInput>
  }

  export type StripeUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<StripeCreateWithoutTicketsInput, StripeUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: StripeCreateOrConnectWithoutTicketsInput
    upsert?: StripeUpsertWithoutTicketsInput
    connect?: StripeWhereUniqueInput
    update?: XOR<XOR<StripeUpdateToOneWithWhereWithoutTicketsInput, StripeUpdateWithoutTicketsInput>, StripeUncheckedUpdateWithoutTicketsInput>
  }

  export type TicketsCreateNestedManyWithoutStripeInput = {
    create?: XOR<TicketsCreateWithoutStripeInput, TicketsUncheckedCreateWithoutStripeInput> | TicketsCreateWithoutStripeInput[] | TicketsUncheckedCreateWithoutStripeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutStripeInput | TicketsCreateOrConnectWithoutStripeInput[]
    createMany?: TicketsCreateManyStripeInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TicketsUncheckedCreateNestedManyWithoutStripeInput = {
    create?: XOR<TicketsCreateWithoutStripeInput, TicketsUncheckedCreateWithoutStripeInput> | TicketsCreateWithoutStripeInput[] | TicketsUncheckedCreateWithoutStripeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutStripeInput | TicketsCreateOrConnectWithoutStripeInput[]
    createMany?: TicketsCreateManyStripeInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type TicketsUpdateManyWithoutStripeNestedInput = {
    create?: XOR<TicketsCreateWithoutStripeInput, TicketsUncheckedCreateWithoutStripeInput> | TicketsCreateWithoutStripeInput[] | TicketsUncheckedCreateWithoutStripeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutStripeInput | TicketsCreateOrConnectWithoutStripeInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutStripeInput | TicketsUpsertWithWhereUniqueWithoutStripeInput[]
    createMany?: TicketsCreateManyStripeInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutStripeInput | TicketsUpdateWithWhereUniqueWithoutStripeInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutStripeInput | TicketsUpdateManyWithWhereWithoutStripeInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type TicketsUncheckedUpdateManyWithoutStripeNestedInput = {
    create?: XOR<TicketsCreateWithoutStripeInput, TicketsUncheckedCreateWithoutStripeInput> | TicketsCreateWithoutStripeInput[] | TicketsUncheckedCreateWithoutStripeInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutStripeInput | TicketsCreateOrConnectWithoutStripeInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutStripeInput | TicketsUpsertWithWhereUniqueWithoutStripeInput[]
    createMany?: TicketsCreateManyStripeInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutStripeInput | TicketsUpdateWithWhereUniqueWithoutStripeInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutStripeInput | TicketsUpdateManyWithWhereWithoutStripeInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAdminRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleFilter<$PrismaModel> | $Enums.AdminRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRole | EnumAdminRoleFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRole[] | ListEnumAdminRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleWithAggregatesFilter<$PrismaModel> | $Enums.AdminRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type TheatersCreateWithoutUsersInput = {
    name: string
    location: string
    movies?: MoviesCreateNestedManyWithoutTheatersInput
    seats?: SeatsCreateNestedManyWithoutTheaterInput
  }

  export type TheatersUncheckedCreateWithoutUsersInput = {
    theatherId?: number
    name: string
    location: string
    movies?: MoviesUncheckedCreateNestedManyWithoutTheatersInput
    seats?: SeatsUncheckedCreateNestedManyWithoutTheaterInput
  }

  export type TheatersCreateOrConnectWithoutUsersInput = {
    where: TheatersWhereUniqueInput
    create: XOR<TheatersCreateWithoutUsersInput, TheatersUncheckedCreateWithoutUsersInput>
  }

  export type SeatsCreateWithoutUsersInput = {
    seatNumber: string
    seatType: string
    theater: TheatersCreateNestedOneWithoutSeatsInput
  }

  export type SeatsUncheckedCreateWithoutUsersInput = {
    seatId?: number
    seatNumber: string
    seatType: string
    theaterID: number
  }

  export type SeatsCreateOrConnectWithoutUsersInput = {
    where: SeatsWhereUniqueInput
    create: XOR<SeatsCreateWithoutUsersInput, SeatsUncheckedCreateWithoutUsersInput>
  }

  export type TicketsCreateWithoutUserInput = {
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    schedule: MovieSchedulesCreateNestedOneWithoutTicketsInput
    stripe: StripeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutUserInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    scheduleID: number
    stripeID: number
  }

  export type TicketsCreateOrConnectWithoutUserInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput>
  }

  export type TicketsCreateManyUserInputEnvelope = {
    data: TicketsCreateManyUserInput | TicketsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TheatersUpsertWithWhereUniqueWithoutUsersInput = {
    where: TheatersWhereUniqueInput
    update: XOR<TheatersUpdateWithoutUsersInput, TheatersUncheckedUpdateWithoutUsersInput>
    create: XOR<TheatersCreateWithoutUsersInput, TheatersUncheckedCreateWithoutUsersInput>
  }

  export type TheatersUpdateWithWhereUniqueWithoutUsersInput = {
    where: TheatersWhereUniqueInput
    data: XOR<TheatersUpdateWithoutUsersInput, TheatersUncheckedUpdateWithoutUsersInput>
  }

  export type TheatersUpdateManyWithWhereWithoutUsersInput = {
    where: TheatersScalarWhereInput
    data: XOR<TheatersUpdateManyMutationInput, TheatersUncheckedUpdateManyWithoutUsersInput>
  }

  export type TheatersScalarWhereInput = {
    AND?: TheatersScalarWhereInput | TheatersScalarWhereInput[]
    OR?: TheatersScalarWhereInput[]
    NOT?: TheatersScalarWhereInput | TheatersScalarWhereInput[]
    theatherId?: IntFilter<"Theaters"> | number
    name?: StringFilter<"Theaters"> | string
    location?: StringFilter<"Theaters"> | string
  }

  export type SeatsUpsertWithWhereUniqueWithoutUsersInput = {
    where: SeatsWhereUniqueInput
    update: XOR<SeatsUpdateWithoutUsersInput, SeatsUncheckedUpdateWithoutUsersInput>
    create: XOR<SeatsCreateWithoutUsersInput, SeatsUncheckedCreateWithoutUsersInput>
  }

  export type SeatsUpdateWithWhereUniqueWithoutUsersInput = {
    where: SeatsWhereUniqueInput
    data: XOR<SeatsUpdateWithoutUsersInput, SeatsUncheckedUpdateWithoutUsersInput>
  }

  export type SeatsUpdateManyWithWhereWithoutUsersInput = {
    where: SeatsScalarWhereInput
    data: XOR<SeatsUpdateManyMutationInput, SeatsUncheckedUpdateManyWithoutUsersInput>
  }

  export type SeatsScalarWhereInput = {
    AND?: SeatsScalarWhereInput | SeatsScalarWhereInput[]
    OR?: SeatsScalarWhereInput[]
    NOT?: SeatsScalarWhereInput | SeatsScalarWhereInput[]
    seatId?: IntFilter<"Seats"> | number
    seatNumber?: StringFilter<"Seats"> | string
    seatType?: StringFilter<"Seats"> | string
    theaterID?: IntFilter<"Seats"> | number
  }

  export type TicketsUpsertWithWhereUniqueWithoutUserInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutUserInput, TicketsUncheckedUpdateWithoutUserInput>
    create: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutUserInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutUserInput, TicketsUncheckedUpdateWithoutUserInput>
  }

  export type TicketsUpdateManyWithWhereWithoutUserInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutUserInput>
  }

  export type TicketsScalarWhereInput = {
    AND?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
    OR?: TicketsScalarWhereInput[]
    NOT?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
    ticketId?: IntFilter<"Tickets"> | number
    ticketNumber?: StringFilter<"Tickets"> | string
    price?: DecimalFilter<"Tickets"> | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFilter<"Tickets"> | number
    userID?: IntFilter<"Tickets"> | number
    stripeID?: IntFilter<"Tickets"> | number
  }

  export type MoviesCreateWithoutTheatersInput = {
    title: string
    description: string
    duration: number
    releaseDate: Date | string
    schedules?: MovieSchedulesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutTheatersInput = {
    movieId?: number
    title: string
    description: string
    duration: number
    releaseDate: Date | string
    schedules?: MovieSchedulesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutTheatersInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutTheatersInput, MoviesUncheckedCreateWithoutTheatersInput>
  }

  export type UserCreateWithoutTheatersInput = {
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    seats?: SeatsCreateNestedManyWithoutUsersInput
    tickets?: TicketsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTheatersInput = {
    userId?: number
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    seats?: SeatsUncheckedCreateNestedManyWithoutUsersInput
    tickets?: TicketsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTheatersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTheatersInput, UserUncheckedCreateWithoutTheatersInput>
  }

  export type SeatsCreateWithoutTheaterInput = {
    seatNumber: string
    seatType: string
    users?: UserCreateNestedManyWithoutSeatsInput
  }

  export type SeatsUncheckedCreateWithoutTheaterInput = {
    seatId?: number
    seatNumber: string
    seatType: string
    users?: UserUncheckedCreateNestedManyWithoutSeatsInput
  }

  export type SeatsCreateOrConnectWithoutTheaterInput = {
    where: SeatsWhereUniqueInput
    create: XOR<SeatsCreateWithoutTheaterInput, SeatsUncheckedCreateWithoutTheaterInput>
  }

  export type SeatsCreateManyTheaterInputEnvelope = {
    data: SeatsCreateManyTheaterInput | SeatsCreateManyTheaterInput[]
    skipDuplicates?: boolean
  }

  export type MoviesUpsertWithWhereUniqueWithoutTheatersInput = {
    where: MoviesWhereUniqueInput
    update: XOR<MoviesUpdateWithoutTheatersInput, MoviesUncheckedUpdateWithoutTheatersInput>
    create: XOR<MoviesCreateWithoutTheatersInput, MoviesUncheckedCreateWithoutTheatersInput>
  }

  export type MoviesUpdateWithWhereUniqueWithoutTheatersInput = {
    where: MoviesWhereUniqueInput
    data: XOR<MoviesUpdateWithoutTheatersInput, MoviesUncheckedUpdateWithoutTheatersInput>
  }

  export type MoviesUpdateManyWithWhereWithoutTheatersInput = {
    where: MoviesScalarWhereInput
    data: XOR<MoviesUpdateManyMutationInput, MoviesUncheckedUpdateManyWithoutTheatersInput>
  }

  export type MoviesScalarWhereInput = {
    AND?: MoviesScalarWhereInput | MoviesScalarWhereInput[]
    OR?: MoviesScalarWhereInput[]
    NOT?: MoviesScalarWhereInput | MoviesScalarWhereInput[]
    movieId?: IntFilter<"Movies"> | number
    title?: StringFilter<"Movies"> | string
    description?: StringFilter<"Movies"> | string
    duration?: IntFilter<"Movies"> | number
    releaseDate?: DateTimeFilter<"Movies"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutTheatersInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTheatersInput, UserUncheckedUpdateWithoutTheatersInput>
    create: XOR<UserCreateWithoutTheatersInput, UserUncheckedCreateWithoutTheatersInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTheatersInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTheatersInput, UserUncheckedUpdateWithoutTheatersInput>
  }

  export type UserUpdateManyWithWhereWithoutTheatersInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTheatersInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    userId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type SeatsUpsertWithWhereUniqueWithoutTheaterInput = {
    where: SeatsWhereUniqueInput
    update: XOR<SeatsUpdateWithoutTheaterInput, SeatsUncheckedUpdateWithoutTheaterInput>
    create: XOR<SeatsCreateWithoutTheaterInput, SeatsUncheckedCreateWithoutTheaterInput>
  }

  export type SeatsUpdateWithWhereUniqueWithoutTheaterInput = {
    where: SeatsWhereUniqueInput
    data: XOR<SeatsUpdateWithoutTheaterInput, SeatsUncheckedUpdateWithoutTheaterInput>
  }

  export type SeatsUpdateManyWithWhereWithoutTheaterInput = {
    where: SeatsScalarWhereInput
    data: XOR<SeatsUpdateManyMutationInput, SeatsUncheckedUpdateManyWithoutTheaterInput>
  }

  export type TheatersCreateWithoutSeatsInput = {
    name: string
    location: string
    movies?: MoviesCreateNestedManyWithoutTheatersInput
    users?: UserCreateNestedManyWithoutTheatersInput
  }

  export type TheatersUncheckedCreateWithoutSeatsInput = {
    theatherId?: number
    name: string
    location: string
    movies?: MoviesUncheckedCreateNestedManyWithoutTheatersInput
    users?: UserUncheckedCreateNestedManyWithoutTheatersInput
  }

  export type TheatersCreateOrConnectWithoutSeatsInput = {
    where: TheatersWhereUniqueInput
    create: XOR<TheatersCreateWithoutSeatsInput, TheatersUncheckedCreateWithoutSeatsInput>
  }

  export type UserCreateWithoutSeatsInput = {
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    theaters?: TheatersCreateNestedManyWithoutUsersInput
    tickets?: TicketsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSeatsInput = {
    userId?: number
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    theaters?: TheatersUncheckedCreateNestedManyWithoutUsersInput
    tickets?: TicketsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSeatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSeatsInput, UserUncheckedCreateWithoutSeatsInput>
  }

  export type TheatersUpsertWithoutSeatsInput = {
    update: XOR<TheatersUpdateWithoutSeatsInput, TheatersUncheckedUpdateWithoutSeatsInput>
    create: XOR<TheatersCreateWithoutSeatsInput, TheatersUncheckedCreateWithoutSeatsInput>
    where?: TheatersWhereInput
  }

  export type TheatersUpdateToOneWithWhereWithoutSeatsInput = {
    where?: TheatersWhereInput
    data: XOR<TheatersUpdateWithoutSeatsInput, TheatersUncheckedUpdateWithoutSeatsInput>
  }

  export type TheatersUpdateWithoutSeatsInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    movies?: MoviesUpdateManyWithoutTheatersNestedInput
    users?: UserUpdateManyWithoutTheatersNestedInput
  }

  export type TheatersUncheckedUpdateWithoutSeatsInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    movies?: MoviesUncheckedUpdateManyWithoutTheatersNestedInput
    users?: UserUncheckedUpdateManyWithoutTheatersNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutSeatsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSeatsInput, UserUncheckedUpdateWithoutSeatsInput>
    create: XOR<UserCreateWithoutSeatsInput, UserUncheckedCreateWithoutSeatsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSeatsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSeatsInput, UserUncheckedUpdateWithoutSeatsInput>
  }

  export type UserUpdateManyWithWhereWithoutSeatsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSeatsInput>
  }

  export type MovieSchedulesCreateWithoutMovieInput = {
    startTime: Date | string
    endTime: Date | string
    tickets?: TicketsCreateNestedManyWithoutScheduleInput
  }

  export type MovieSchedulesUncheckedCreateWithoutMovieInput = {
    scheduleId?: number
    startTime: Date | string
    endTime: Date | string
    tickets?: TicketsUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type MovieSchedulesCreateOrConnectWithoutMovieInput = {
    where: MovieSchedulesWhereUniqueInput
    create: XOR<MovieSchedulesCreateWithoutMovieInput, MovieSchedulesUncheckedCreateWithoutMovieInput>
  }

  export type MovieSchedulesCreateManyMovieInputEnvelope = {
    data: MovieSchedulesCreateManyMovieInput | MovieSchedulesCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type TheatersCreateWithoutMoviesInput = {
    name: string
    location: string
    users?: UserCreateNestedManyWithoutTheatersInput
    seats?: SeatsCreateNestedManyWithoutTheaterInput
  }

  export type TheatersUncheckedCreateWithoutMoviesInput = {
    theatherId?: number
    name: string
    location: string
    users?: UserUncheckedCreateNestedManyWithoutTheatersInput
    seats?: SeatsUncheckedCreateNestedManyWithoutTheaterInput
  }

  export type TheatersCreateOrConnectWithoutMoviesInput = {
    where: TheatersWhereUniqueInput
    create: XOR<TheatersCreateWithoutMoviesInput, TheatersUncheckedCreateWithoutMoviesInput>
  }

  export type MovieSchedulesUpsertWithWhereUniqueWithoutMovieInput = {
    where: MovieSchedulesWhereUniqueInput
    update: XOR<MovieSchedulesUpdateWithoutMovieInput, MovieSchedulesUncheckedUpdateWithoutMovieInput>
    create: XOR<MovieSchedulesCreateWithoutMovieInput, MovieSchedulesUncheckedCreateWithoutMovieInput>
  }

  export type MovieSchedulesUpdateWithWhereUniqueWithoutMovieInput = {
    where: MovieSchedulesWhereUniqueInput
    data: XOR<MovieSchedulesUpdateWithoutMovieInput, MovieSchedulesUncheckedUpdateWithoutMovieInput>
  }

  export type MovieSchedulesUpdateManyWithWhereWithoutMovieInput = {
    where: MovieSchedulesScalarWhereInput
    data: XOR<MovieSchedulesUpdateManyMutationInput, MovieSchedulesUncheckedUpdateManyWithoutMovieInput>
  }

  export type MovieSchedulesScalarWhereInput = {
    AND?: MovieSchedulesScalarWhereInput | MovieSchedulesScalarWhereInput[]
    OR?: MovieSchedulesScalarWhereInput[]
    NOT?: MovieSchedulesScalarWhereInput | MovieSchedulesScalarWhereInput[]
    scheduleId?: IntFilter<"MovieSchedules"> | number
    startTime?: DateTimeFilter<"MovieSchedules"> | Date | string
    endTime?: DateTimeFilter<"MovieSchedules"> | Date | string
    movieID?: IntFilter<"MovieSchedules"> | number
  }

  export type TheatersUpsertWithWhereUniqueWithoutMoviesInput = {
    where: TheatersWhereUniqueInput
    update: XOR<TheatersUpdateWithoutMoviesInput, TheatersUncheckedUpdateWithoutMoviesInput>
    create: XOR<TheatersCreateWithoutMoviesInput, TheatersUncheckedCreateWithoutMoviesInput>
  }

  export type TheatersUpdateWithWhereUniqueWithoutMoviesInput = {
    where: TheatersWhereUniqueInput
    data: XOR<TheatersUpdateWithoutMoviesInput, TheatersUncheckedUpdateWithoutMoviesInput>
  }

  export type TheatersUpdateManyWithWhereWithoutMoviesInput = {
    where: TheatersScalarWhereInput
    data: XOR<TheatersUpdateManyMutationInput, TheatersUncheckedUpdateManyWithoutMoviesInput>
  }

  export type MoviesCreateWithoutSchedulesInput = {
    title: string
    description: string
    duration: number
    releaseDate: Date | string
    theaters?: TheatersCreateNestedManyWithoutMoviesInput
  }

  export type MoviesUncheckedCreateWithoutSchedulesInput = {
    movieId?: number
    title: string
    description: string
    duration: number
    releaseDate: Date | string
    theaters?: TheatersUncheckedCreateNestedManyWithoutMoviesInput
  }

  export type MoviesCreateOrConnectWithoutSchedulesInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutSchedulesInput, MoviesUncheckedCreateWithoutSchedulesInput>
  }

  export type TicketsCreateWithoutScheduleInput = {
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    user: UserCreateNestedOneWithoutTicketsInput
    stripe: StripeCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutScheduleInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    userID: number
    stripeID: number
  }

  export type TicketsCreateOrConnectWithoutScheduleInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutScheduleInput, TicketsUncheckedCreateWithoutScheduleInput>
  }

  export type TicketsCreateManyScheduleInputEnvelope = {
    data: TicketsCreateManyScheduleInput | TicketsCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type MoviesUpsertWithoutSchedulesInput = {
    update: XOR<MoviesUpdateWithoutSchedulesInput, MoviesUncheckedUpdateWithoutSchedulesInput>
    create: XOR<MoviesCreateWithoutSchedulesInput, MoviesUncheckedCreateWithoutSchedulesInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutSchedulesInput, MoviesUncheckedUpdateWithoutSchedulesInput>
  }

  export type MoviesUpdateWithoutSchedulesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUpdateManyWithoutMoviesNestedInput
  }

  export type MoviesUncheckedUpdateWithoutSchedulesInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUncheckedUpdateManyWithoutMoviesNestedInput
  }

  export type TicketsUpsertWithWhereUniqueWithoutScheduleInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutScheduleInput, TicketsUncheckedUpdateWithoutScheduleInput>
    create: XOR<TicketsCreateWithoutScheduleInput, TicketsUncheckedCreateWithoutScheduleInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutScheduleInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutScheduleInput, TicketsUncheckedUpdateWithoutScheduleInput>
  }

  export type TicketsUpdateManyWithWhereWithoutScheduleInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutScheduleInput>
  }

  export type MovieSchedulesCreateWithoutTicketsInput = {
    startTime: Date | string
    endTime: Date | string
    movie: MoviesCreateNestedOneWithoutSchedulesInput
  }

  export type MovieSchedulesUncheckedCreateWithoutTicketsInput = {
    scheduleId?: number
    startTime: Date | string
    endTime: Date | string
    movieID: number
  }

  export type MovieSchedulesCreateOrConnectWithoutTicketsInput = {
    where: MovieSchedulesWhereUniqueInput
    create: XOR<MovieSchedulesCreateWithoutTicketsInput, MovieSchedulesUncheckedCreateWithoutTicketsInput>
  }

  export type UserCreateWithoutTicketsInput = {
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    theaters?: TheatersCreateNestedManyWithoutUsersInput
    seats?: SeatsCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTicketsInput = {
    userId?: number
    email: string
    password: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    theaters?: TheatersUncheckedCreateNestedManyWithoutUsersInput
    seats?: SeatsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
  }

  export type StripeCreateWithoutTicketsInput = {
    customerID: string
    paymentMethodID: string
  }

  export type StripeUncheckedCreateWithoutTicketsInput = {
    stripeId?: number
    customerID: string
    paymentMethodID: string
  }

  export type StripeCreateOrConnectWithoutTicketsInput = {
    where: StripeWhereUniqueInput
    create: XOR<StripeCreateWithoutTicketsInput, StripeUncheckedCreateWithoutTicketsInput>
  }

  export type MovieSchedulesUpsertWithoutTicketsInput = {
    update: XOR<MovieSchedulesUpdateWithoutTicketsInput, MovieSchedulesUncheckedUpdateWithoutTicketsInput>
    create: XOR<MovieSchedulesCreateWithoutTicketsInput, MovieSchedulesUncheckedCreateWithoutTicketsInput>
    where?: MovieSchedulesWhereInput
  }

  export type MovieSchedulesUpdateToOneWithWhereWithoutTicketsInput = {
    where?: MovieSchedulesWhereInput
    data: XOR<MovieSchedulesUpdateWithoutTicketsInput, MovieSchedulesUncheckedUpdateWithoutTicketsInput>
  }

  export type MovieSchedulesUpdateWithoutTicketsInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    movie?: MoviesUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type MovieSchedulesUncheckedUpdateWithoutTicketsInput = {
    scheduleId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    movieID?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutTicketsInput = {
    update: XOR<UserUpdateWithoutTicketsInput, UserUncheckedUpdateWithoutTicketsInput>
    create: XOR<UserCreateWithoutTicketsInput, UserUncheckedCreateWithoutTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTicketsInput, UserUncheckedUpdateWithoutTicketsInput>
  }

  export type UserUpdateWithoutTicketsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUpdateManyWithoutUsersNestedInput
    seats?: SeatsUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTicketsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUncheckedUpdateManyWithoutUsersNestedInput
    seats?: SeatsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type StripeUpsertWithoutTicketsInput = {
    update: XOR<StripeUpdateWithoutTicketsInput, StripeUncheckedUpdateWithoutTicketsInput>
    create: XOR<StripeCreateWithoutTicketsInput, StripeUncheckedCreateWithoutTicketsInput>
    where?: StripeWhereInput
  }

  export type StripeUpdateToOneWithWhereWithoutTicketsInput = {
    where?: StripeWhereInput
    data: XOR<StripeUpdateWithoutTicketsInput, StripeUncheckedUpdateWithoutTicketsInput>
  }

  export type StripeUpdateWithoutTicketsInput = {
    customerID?: StringFieldUpdateOperationsInput | string
    paymentMethodID?: StringFieldUpdateOperationsInput | string
  }

  export type StripeUncheckedUpdateWithoutTicketsInput = {
    stripeId?: IntFieldUpdateOperationsInput | number
    customerID?: StringFieldUpdateOperationsInput | string
    paymentMethodID?: StringFieldUpdateOperationsInput | string
  }

  export type TicketsCreateWithoutStripeInput = {
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    schedule: MovieSchedulesCreateNestedOneWithoutTicketsInput
    user: UserCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutStripeInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    scheduleID: number
    userID: number
  }

  export type TicketsCreateOrConnectWithoutStripeInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutStripeInput, TicketsUncheckedCreateWithoutStripeInput>
  }

  export type TicketsCreateManyStripeInputEnvelope = {
    data: TicketsCreateManyStripeInput | TicketsCreateManyStripeInput[]
    skipDuplicates?: boolean
  }

  export type TicketsUpsertWithWhereUniqueWithoutStripeInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutStripeInput, TicketsUncheckedUpdateWithoutStripeInput>
    create: XOR<TicketsCreateWithoutStripeInput, TicketsUncheckedCreateWithoutStripeInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutStripeInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutStripeInput, TicketsUncheckedUpdateWithoutStripeInput>
  }

  export type TicketsUpdateManyWithWhereWithoutStripeInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutStripeInput>
  }

  export type TicketsCreateManyUserInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    scheduleID: number
    stripeID: number
  }

  export type TheatersUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    movies?: MoviesUpdateManyWithoutTheatersNestedInput
    seats?: SeatsUpdateManyWithoutTheaterNestedInput
  }

  export type TheatersUncheckedUpdateWithoutUsersInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    movies?: MoviesUncheckedUpdateManyWithoutTheatersNestedInput
    seats?: SeatsUncheckedUpdateManyWithoutTheaterNestedInput
  }

  export type TheatersUncheckedUpdateManyWithoutUsersInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type SeatsUpdateWithoutUsersInput = {
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    theater?: TheatersUpdateOneRequiredWithoutSeatsNestedInput
  }

  export type SeatsUncheckedUpdateWithoutUsersInput = {
    seatId?: IntFieldUpdateOperationsInput | number
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    theaterID?: IntFieldUpdateOperationsInput | number
  }

  export type SeatsUncheckedUpdateManyWithoutUsersInput = {
    seatId?: IntFieldUpdateOperationsInput | number
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    theaterID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsUpdateWithoutUserInput = {
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    schedule?: MovieSchedulesUpdateOneRequiredWithoutTicketsNestedInput
    stripe?: StripeUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutUserInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFieldUpdateOperationsInput | number
    stripeID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsUncheckedUpdateManyWithoutUserInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFieldUpdateOperationsInput | number
    stripeID?: IntFieldUpdateOperationsInput | number
  }

  export type SeatsCreateManyTheaterInput = {
    seatId?: number
    seatNumber: string
    seatType: string
  }

  export type MoviesUpdateWithoutTheatersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: MovieSchedulesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutTheatersInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: MovieSchedulesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateManyWithoutTheatersInput = {
    movieId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTheatersInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seats?: SeatsUpdateManyWithoutUsersNestedInput
    tickets?: TicketsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTheatersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seats?: SeatsUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: TicketsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTheatersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeatsUpdateWithoutTheaterInput = {
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutSeatsNestedInput
  }

  export type SeatsUncheckedUpdateWithoutTheaterInput = {
    seatId?: IntFieldUpdateOperationsInput | number
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutSeatsNestedInput
  }

  export type SeatsUncheckedUpdateManyWithoutTheaterInput = {
    seatId?: IntFieldUpdateOperationsInput | number
    seatNumber?: StringFieldUpdateOperationsInput | string
    seatType?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutSeatsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUpdateManyWithoutUsersNestedInput
    tickets?: TicketsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSeatsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    theaters?: TheatersUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: TicketsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSeatsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieSchedulesCreateManyMovieInput = {
    scheduleId?: number
    startTime: Date | string
    endTime: Date | string
  }

  export type MovieSchedulesUpdateWithoutMovieInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketsUpdateManyWithoutScheduleNestedInput
  }

  export type MovieSchedulesUncheckedUpdateWithoutMovieInput = {
    scheduleId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketsUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type MovieSchedulesUncheckedUpdateManyWithoutMovieInput = {
    scheduleId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheatersUpdateWithoutMoviesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutTheatersNestedInput
    seats?: SeatsUpdateManyWithoutTheaterNestedInput
  }

  export type TheatersUncheckedUpdateWithoutMoviesInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTheatersNestedInput
    seats?: SeatsUncheckedUpdateManyWithoutTheaterNestedInput
  }

  export type TheatersUncheckedUpdateManyWithoutMoviesInput = {
    theatherId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type TicketsCreateManyScheduleInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    userID: number
    stripeID: number
  }

  export type TicketsUpdateWithoutScheduleInput = {
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
    stripe?: StripeUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutScheduleInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userID?: IntFieldUpdateOperationsInput | number
    stripeID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsUncheckedUpdateManyWithoutScheduleInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userID?: IntFieldUpdateOperationsInput | number
    stripeID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsCreateManyStripeInput = {
    ticketId?: number
    ticketNumber: string
    price: Decimal | DecimalJsLike | number | string
    scheduleID: number
    userID: number
  }

  export type TicketsUpdateWithoutStripeInput = {
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    schedule?: MovieSchedulesUpdateOneRequiredWithoutTicketsNestedInput
    user?: UserUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutStripeInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFieldUpdateOperationsInput | number
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type TicketsUncheckedUpdateManyWithoutStripeInput = {
    ticketId?: IntFieldUpdateOperationsInput | number
    ticketNumber?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    scheduleID?: IntFieldUpdateOperationsInput | number
    userID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}